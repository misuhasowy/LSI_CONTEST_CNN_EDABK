// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="encode_encode,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.222700,HLS_SYN_LAT=14685,HLS_SYN_TPT=14413,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=446336,HLS_SYN_LUT=278966,HLS_VERSION=2023_1}" *)

module encode (
        full_in_TDATA,
        full_out_TDATA,
        ap_clk,
        ap_rst_n,
        full_in_TVALID,
        full_in_TREADY,
        ap_start,
        full_out_TVALID,
        full_out_TREADY,
        ap_done,
        ap_ready,
        ap_idle
);


input  [39:0] full_in_TDATA;
output  [39:0] full_out_TDATA;
input   ap_clk;
input   ap_rst_n;
input   full_in_TVALID;
output   full_in_TREADY;
input   ap_start;
output   full_out_TVALID;
input   full_out_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;

 reg    ap_rst_n_inv;
wire    conv1_U0_ap_start;
wire    conv1_U0_ap_done;
wire    conv1_U0_ap_continue;
wire    conv1_U0_ap_idle;
wire    conv1_U0_ap_ready;
wire   [39:0] conv1_U0_conv1_out_din;
wire    conv1_U0_conv1_out_write;
wire    conv1_U0_start_out;
wire    conv1_U0_start_write;
wire    conv1_U0_full_in_TREADY;
wire    pool1_U0_ap_start;
wire    pool1_U0_ap_done;
wire    pool1_U0_ap_continue;
wire    pool1_U0_ap_idle;
wire    pool1_U0_ap_ready;
wire    pool1_U0_conv1_out_read;
wire   [39:0] pool1_U0_pool1_out_din;
wire    pool1_U0_pool1_out_write;
wire    pool1_U0_start_out;
wire    pool1_U0_start_write;
wire    conv2_U0_ap_start;
wire    conv2_U0_ap_done;
wire    conv2_U0_ap_continue;
wire    conv2_U0_ap_idle;
wire    conv2_U0_ap_ready;
wire    conv2_U0_pool1_out_read;
wire    conv2_U0_start_out;
wire    conv2_U0_start_write;
wire   [39:0] conv2_U0_conv2_out_din;
wire    conv2_U0_conv2_out_write;
wire    pool2_U0_ap_start;
wire    pool2_U0_ap_done;
wire    pool2_U0_ap_continue;
wire    pool2_U0_ap_idle;
wire    pool2_U0_ap_ready;
wire    pool2_U0_conv2_out_read;
wire   [39:0] pool2_U0_pool2_out_din;
wire    pool2_U0_pool2_out_write;
wire    pool2_U0_start_out;
wire    pool2_U0_start_write;
wire    conv3_U0_ap_start;
wire    conv3_U0_ap_done;
wire    conv3_U0_ap_continue;
wire    conv3_U0_ap_idle;
wire    conv3_U0_ap_ready;
wire    conv3_U0_pool2_out_read;
wire   [39:0] conv3_U0_conv3_out_din;
wire    conv3_U0_conv3_out_write;
wire    conv3_U0_start_out;
wire    conv3_U0_start_write;
wire    pool3_U0_ap_start;
wire    pool3_U0_ap_done;
wire    pool3_U0_ap_continue;
wire    pool3_U0_ap_idle;
wire    pool3_U0_ap_ready;
wire    pool3_U0_conv3_out_read;
wire   [39:0] pool3_U0_full_out_TDATA;
wire    pool3_U0_full_out_TVALID;
wire    conv1_out_full_n;
wire   [39:0] conv1_out_dout;
wire   [1:0] conv1_out_num_data_valid;
wire   [1:0] conv1_out_fifo_cap;
wire    conv1_out_empty_n;
wire    pool1_out_full_n;
wire   [39:0] pool1_out_dout;
wire   [1:0] pool1_out_num_data_valid;
wire   [1:0] pool1_out_fifo_cap;
wire    pool1_out_empty_n;
wire    conv2_out_full_n;
wire   [39:0] conv2_out_dout;
wire   [1:0] conv2_out_num_data_valid;
wire   [1:0] conv2_out_fifo_cap;
wire    conv2_out_empty_n;
wire    pool2_out_full_n;
wire   [39:0] pool2_out_dout;
wire   [1:0] pool2_out_num_data_valid;
wire   [1:0] pool2_out_fifo_cap;
wire    pool2_out_empty_n;
wire    conv3_out_full_n;
wire   [39:0] conv3_out_dout;
wire   [1:0] conv3_out_num_data_valid;
wire   [1:0] conv3_out_fifo_cap;
wire    conv3_out_empty_n;
wire   [0:0] start_for_pool1_U0_din;
wire    start_for_pool1_U0_full_n;
wire   [0:0] start_for_pool1_U0_dout;
wire    start_for_pool1_U0_empty_n;
wire   [0:0] start_for_conv2_U0_din;
wire    start_for_conv2_U0_full_n;
wire   [0:0] start_for_conv2_U0_dout;
wire    start_for_conv2_U0_empty_n;
wire   [0:0] start_for_pool2_U0_din;
wire    start_for_pool2_U0_full_n;
wire   [0:0] start_for_pool2_U0_dout;
wire    start_for_pool2_U0_empty_n;
wire   [0:0] start_for_conv3_U0_din;
wire    start_for_conv3_U0_full_n;
wire   [0:0] start_for_conv3_U0_dout;
wire    start_for_conv3_U0_empty_n;
wire   [0:0] start_for_pool3_U0_din;
wire    start_for_pool3_U0_full_n;
wire   [0:0] start_for_pool3_U0_dout;
wire    start_for_pool3_U0_empty_n;

encode_conv1 conv1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(conv1_U0_ap_start),
    .start_full_n(start_for_pool1_U0_full_n),
    .ap_done(conv1_U0_ap_done),
    .ap_continue(conv1_U0_ap_continue),
    .ap_idle(conv1_U0_ap_idle),
    .ap_ready(conv1_U0_ap_ready),
    .conv1_out_din(conv1_U0_conv1_out_din),
    .conv1_out_num_data_valid(conv1_out_num_data_valid),
    .conv1_out_fifo_cap(conv1_out_fifo_cap),
    .conv1_out_full_n(conv1_out_full_n),
    .conv1_out_write(conv1_U0_conv1_out_write),
    .start_out(conv1_U0_start_out),
    .start_write(conv1_U0_start_write),
    .full_in_TDATA(full_in_TDATA),
    .full_in_TVALID(full_in_TVALID),
    .full_in_TREADY(conv1_U0_full_in_TREADY)
);

encode_pool1 pool1_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(pool1_U0_ap_start),
    .start_full_n(start_for_conv2_U0_full_n),
    .ap_done(pool1_U0_ap_done),
    .ap_continue(pool1_U0_ap_continue),
    .ap_idle(pool1_U0_ap_idle),
    .ap_ready(pool1_U0_ap_ready),
    .conv1_out_dout(conv1_out_dout),
    .conv1_out_num_data_valid(conv1_out_num_data_valid),
    .conv1_out_fifo_cap(conv1_out_fifo_cap),
    .conv1_out_empty_n(conv1_out_empty_n),
    .conv1_out_read(pool1_U0_conv1_out_read),
    .pool1_out_din(pool1_U0_pool1_out_din),
    .pool1_out_num_data_valid(pool1_out_num_data_valid),
    .pool1_out_fifo_cap(pool1_out_fifo_cap),
    .pool1_out_full_n(pool1_out_full_n),
    .pool1_out_write(pool1_U0_pool1_out_write),
    .start_out(pool1_U0_start_out),
    .start_write(pool1_U0_start_write)
);

encode_conv2 conv2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(conv2_U0_ap_start),
    .start_full_n(start_for_pool2_U0_full_n),
    .ap_done(conv2_U0_ap_done),
    .ap_continue(conv2_U0_ap_continue),
    .ap_idle(conv2_U0_ap_idle),
    .ap_ready(conv2_U0_ap_ready),
    .pool1_out_dout(pool1_out_dout),
    .pool1_out_num_data_valid(pool1_out_num_data_valid),
    .pool1_out_fifo_cap(pool1_out_fifo_cap),
    .pool1_out_empty_n(pool1_out_empty_n),
    .pool1_out_read(conv2_U0_pool1_out_read),
    .start_out(conv2_U0_start_out),
    .start_write(conv2_U0_start_write),
    .conv2_out_din(conv2_U0_conv2_out_din),
    .conv2_out_num_data_valid(conv2_out_num_data_valid),
    .conv2_out_fifo_cap(conv2_out_fifo_cap),
    .conv2_out_full_n(conv2_out_full_n),
    .conv2_out_write(conv2_U0_conv2_out_write)
);

encode_pool2 pool2_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(pool2_U0_ap_start),
    .start_full_n(start_for_conv3_U0_full_n),
    .ap_done(pool2_U0_ap_done),
    .ap_continue(pool2_U0_ap_continue),
    .ap_idle(pool2_U0_ap_idle),
    .ap_ready(pool2_U0_ap_ready),
    .conv2_out_dout(conv2_out_dout),
    .conv2_out_num_data_valid(conv2_out_num_data_valid),
    .conv2_out_fifo_cap(conv2_out_fifo_cap),
    .conv2_out_empty_n(conv2_out_empty_n),
    .conv2_out_read(pool2_U0_conv2_out_read),
    .pool2_out_din(pool2_U0_pool2_out_din),
    .pool2_out_num_data_valid(pool2_out_num_data_valid),
    .pool2_out_fifo_cap(pool2_out_fifo_cap),
    .pool2_out_full_n(pool2_out_full_n),
    .pool2_out_write(pool2_U0_pool2_out_write),
    .start_out(pool2_U0_start_out),
    .start_write(pool2_U0_start_write)
);

encode_conv3 conv3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(conv3_U0_ap_start),
    .start_full_n(start_for_pool3_U0_full_n),
    .ap_done(conv3_U0_ap_done),
    .ap_continue(conv3_U0_ap_continue),
    .ap_idle(conv3_U0_ap_idle),
    .ap_ready(conv3_U0_ap_ready),
    .pool2_out_dout(pool2_out_dout),
    .pool2_out_num_data_valid(pool2_out_num_data_valid),
    .pool2_out_fifo_cap(pool2_out_fifo_cap),
    .pool2_out_empty_n(pool2_out_empty_n),
    .pool2_out_read(conv3_U0_pool2_out_read),
    .conv3_out_din(conv3_U0_conv3_out_din),
    .conv3_out_num_data_valid(conv3_out_num_data_valid),
    .conv3_out_fifo_cap(conv3_out_fifo_cap),
    .conv3_out_full_n(conv3_out_full_n),
    .conv3_out_write(conv3_U0_conv3_out_write),
    .start_out(conv3_U0_start_out),
    .start_write(conv3_U0_start_write)
);

encode_pool3 pool3_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(pool3_U0_ap_start),
    .ap_done(pool3_U0_ap_done),
    .ap_continue(pool3_U0_ap_continue),
    .ap_idle(pool3_U0_ap_idle),
    .ap_ready(pool3_U0_ap_ready),
    .full_out_TREADY(full_out_TREADY),
    .conv3_out_dout(conv3_out_dout),
    .conv3_out_num_data_valid(conv3_out_num_data_valid),
    .conv3_out_fifo_cap(conv3_out_fifo_cap),
    .conv3_out_empty_n(conv3_out_empty_n),
    .conv3_out_read(pool3_U0_conv3_out_read),
    .full_out_TDATA(pool3_U0_full_out_TDATA),
    .full_out_TVALID(pool3_U0_full_out_TVALID)
);

encode_fifo_w40_d2_S conv1_out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(conv1_U0_conv1_out_din),
    .if_full_n(conv1_out_full_n),
    .if_write(conv1_U0_conv1_out_write),
    .if_dout(conv1_out_dout),
    .if_num_data_valid(conv1_out_num_data_valid),
    .if_fifo_cap(conv1_out_fifo_cap),
    .if_empty_n(conv1_out_empty_n),
    .if_read(pool1_U0_conv1_out_read)
);

encode_fifo_w40_d2_S pool1_out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(pool1_U0_pool1_out_din),
    .if_full_n(pool1_out_full_n),
    .if_write(pool1_U0_pool1_out_write),
    .if_dout(pool1_out_dout),
    .if_num_data_valid(pool1_out_num_data_valid),
    .if_fifo_cap(pool1_out_fifo_cap),
    .if_empty_n(pool1_out_empty_n),
    .if_read(conv2_U0_pool1_out_read)
);

encode_fifo_w40_d2_S conv2_out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(conv2_U0_conv2_out_din),
    .if_full_n(conv2_out_full_n),
    .if_write(conv2_U0_conv2_out_write),
    .if_dout(conv2_out_dout),
    .if_num_data_valid(conv2_out_num_data_valid),
    .if_fifo_cap(conv2_out_fifo_cap),
    .if_empty_n(conv2_out_empty_n),
    .if_read(pool2_U0_conv2_out_read)
);

encode_fifo_w40_d2_S pool2_out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(pool2_U0_pool2_out_din),
    .if_full_n(pool2_out_full_n),
    .if_write(pool2_U0_pool2_out_write),
    .if_dout(pool2_out_dout),
    .if_num_data_valid(pool2_out_num_data_valid),
    .if_fifo_cap(pool2_out_fifo_cap),
    .if_empty_n(pool2_out_empty_n),
    .if_read(conv3_U0_pool2_out_read)
);

encode_fifo_w40_d2_S conv3_out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(conv3_U0_conv3_out_din),
    .if_full_n(conv3_out_full_n),
    .if_write(conv3_U0_conv3_out_write),
    .if_dout(conv3_out_dout),
    .if_num_data_valid(conv3_out_num_data_valid),
    .if_fifo_cap(conv3_out_fifo_cap),
    .if_empty_n(conv3_out_empty_n),
    .if_read(pool3_U0_conv3_out_read)
);

encode_start_for_pool1_U0 start_for_pool1_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_pool1_U0_din),
    .if_full_n(start_for_pool1_U0_full_n),
    .if_write(conv1_U0_start_write),
    .if_dout(start_for_pool1_U0_dout),
    .if_empty_n(start_for_pool1_U0_empty_n),
    .if_read(pool1_U0_ap_ready)
);

encode_start_for_conv2_U0 start_for_conv2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_conv2_U0_din),
    .if_full_n(start_for_conv2_U0_full_n),
    .if_write(pool1_U0_start_write),
    .if_dout(start_for_conv2_U0_dout),
    .if_empty_n(start_for_conv2_U0_empty_n),
    .if_read(conv2_U0_ap_ready)
);

encode_start_for_pool2_U0 start_for_pool2_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_pool2_U0_din),
    .if_full_n(start_for_pool2_U0_full_n),
    .if_write(conv2_U0_start_write),
    .if_dout(start_for_pool2_U0_dout),
    .if_empty_n(start_for_pool2_U0_empty_n),
    .if_read(pool2_U0_ap_ready)
);

encode_start_for_conv3_U0 start_for_conv3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_conv3_U0_din),
    .if_full_n(start_for_conv3_U0_full_n),
    .if_write(pool2_U0_start_write),
    .if_dout(start_for_conv3_U0_dout),
    .if_empty_n(start_for_conv3_U0_empty_n),
    .if_read(conv3_U0_ap_ready)
);

encode_start_for_pool3_U0 start_for_pool3_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_pool3_U0_din),
    .if_full_n(start_for_pool3_U0_full_n),
    .if_write(conv3_U0_start_write),
    .if_dout(start_for_pool3_U0_dout),
    .if_empty_n(start_for_pool3_U0_empty_n),
    .if_read(pool3_U0_ap_ready)
);

assign ap_done = pool3_U0_ap_done;

assign ap_idle = (pool3_U0_ap_idle & pool2_U0_ap_idle & pool1_U0_ap_idle & conv3_U0_ap_idle & conv2_U0_ap_idle & conv1_U0_ap_idle);

assign ap_ready = conv1_U0_ap_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign conv1_U0_ap_continue = 1'b1;

assign conv1_U0_ap_start = ap_start;

assign conv2_U0_ap_continue = 1'b1;

assign conv2_U0_ap_start = start_for_conv2_U0_empty_n;

assign conv3_U0_ap_continue = 1'b1;

assign conv3_U0_ap_start = start_for_conv3_U0_empty_n;

assign full_in_TREADY = conv1_U0_full_in_TREADY;

assign full_out_TDATA = pool3_U0_full_out_TDATA;

assign full_out_TVALID = pool3_U0_full_out_TVALID;

assign pool1_U0_ap_continue = 1'b1;

assign pool1_U0_ap_start = start_for_pool1_U0_empty_n;

assign pool2_U0_ap_continue = 1'b1;

assign pool2_U0_ap_start = start_for_pool2_U0_empty_n;

assign pool3_U0_ap_continue = 1'b1;

assign pool3_U0_ap_start = start_for_pool3_U0_empty_n;

assign start_for_conv2_U0_din = 1'b1;

assign start_for_conv3_U0_din = 1'b1;

assign start_for_pool1_U0_din = 1'b1;

assign start_for_pool2_U0_din = 1'b1;

assign start_for_pool3_U0_din = 1'b1;

endmodule //encode
