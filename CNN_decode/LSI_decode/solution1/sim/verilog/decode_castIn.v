// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decode_castIn (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        full_in_AXI_TVALID,
        full_in_float8_din,
        full_in_float8_num_data_valid,
        full_in_float8_fifo_cap,
        full_in_float8_full_n,
        full_in_float8_write,
        start_out,
        start_write,
        full_in_AXI_TDATA,
        full_in_AXI_TREADY,
        full_in_AXI_TKEEP,
        full_in_AXI_TSTRB,
        full_in_AXI_TUSER,
        full_in_AXI_TLAST,
        full_in_AXI_TID,
        full_in_AXI_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   full_in_AXI_TVALID;
output  [31:0] full_in_float8_din;
input  [1:0] full_in_float8_num_data_valid;
input  [1:0] full_in_float8_fifo_cap;
input   full_in_float8_full_n;
output   full_in_float8_write;
output   start_out;
output   start_write;
input  [31:0] full_in_AXI_TDATA;
output   full_in_AXI_TREADY;
input  [3:0] full_in_AXI_TKEEP;
input  [3:0] full_in_AXI_TSTRB;
input  [1:0] full_in_AXI_TUSER;
input  [0:0] full_in_AXI_TLAST;
input  [4:0] full_in_AXI_TID;
input  [5:0] full_in_AXI_TDEST;

reg ap_idle;
reg full_in_float8_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire   [0:0] icmp_ln8_fu_91_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    full_in_AXI_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    full_in_float8_blk_n;
reg   [31:0] tmp_data_V_reg_122;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] i_fu_54;
wire   [7:0] i_4_fu_97_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_i_3;
reg    ap_block_pp0_stage0_01001;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    regslice_both_full_in_AXI_V_data_V_U_apdone_blk;
wire   [31:0] full_in_AXI_TDATA_int_regslice;
wire    full_in_AXI_TVALID_int_regslice;
reg    full_in_AXI_TREADY_int_regslice;
wire    regslice_both_full_in_AXI_V_data_V_U_ack_in;
wire    regslice_both_full_in_AXI_V_keep_V_U_apdone_blk;
wire   [3:0] full_in_AXI_TKEEP_int_regslice;
wire    regslice_both_full_in_AXI_V_keep_V_U_vld_out;
wire    regslice_both_full_in_AXI_V_keep_V_U_ack_in;
wire    regslice_both_full_in_AXI_V_strb_V_U_apdone_blk;
wire   [3:0] full_in_AXI_TSTRB_int_regslice;
wire    regslice_both_full_in_AXI_V_strb_V_U_vld_out;
wire    regslice_both_full_in_AXI_V_strb_V_U_ack_in;
wire    regslice_both_full_in_AXI_V_user_V_U_apdone_blk;
wire   [1:0] full_in_AXI_TUSER_int_regslice;
wire    regslice_both_full_in_AXI_V_user_V_U_vld_out;
wire    regslice_both_full_in_AXI_V_user_V_U_ack_in;
wire    regslice_both_full_in_AXI_V_last_V_U_apdone_blk;
wire   [0:0] full_in_AXI_TLAST_int_regslice;
wire    regslice_both_full_in_AXI_V_last_V_U_vld_out;
wire    regslice_both_full_in_AXI_V_last_V_U_ack_in;
wire    regslice_both_full_in_AXI_V_id_V_U_apdone_blk;
wire   [4:0] full_in_AXI_TID_int_regslice;
wire    regslice_both_full_in_AXI_V_id_V_U_vld_out;
wire    regslice_both_full_in_AXI_V_id_V_U_ack_in;
wire    regslice_both_full_in_AXI_V_dest_V_U_apdone_blk;
wire   [5:0] full_in_AXI_TDEST_int_regslice;
wire    regslice_both_full_in_AXI_V_dest_V_U_vld_out;
wire    regslice_both_full_in_AXI_V_dest_V_U_ack_in;
reg    ap_condition_115;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

decode_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

decode_regslice_both #(
    .DataWidth( 32 ))
regslice_both_full_in_AXI_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(full_in_AXI_TDATA),
    .vld_in(full_in_AXI_TVALID),
    .ack_in(regslice_both_full_in_AXI_V_data_V_U_ack_in),
    .data_out(full_in_AXI_TDATA_int_regslice),
    .vld_out(full_in_AXI_TVALID_int_regslice),
    .ack_out(full_in_AXI_TREADY_int_regslice),
    .apdone_blk(regslice_both_full_in_AXI_V_data_V_U_apdone_blk)
);

decode_regslice_both #(
    .DataWidth( 4 ))
regslice_both_full_in_AXI_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(full_in_AXI_TKEEP),
    .vld_in(full_in_AXI_TVALID),
    .ack_in(regslice_both_full_in_AXI_V_keep_V_U_ack_in),
    .data_out(full_in_AXI_TKEEP_int_regslice),
    .vld_out(regslice_both_full_in_AXI_V_keep_V_U_vld_out),
    .ack_out(full_in_AXI_TREADY_int_regslice),
    .apdone_blk(regslice_both_full_in_AXI_V_keep_V_U_apdone_blk)
);

decode_regslice_both #(
    .DataWidth( 4 ))
regslice_both_full_in_AXI_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(full_in_AXI_TSTRB),
    .vld_in(full_in_AXI_TVALID),
    .ack_in(regslice_both_full_in_AXI_V_strb_V_U_ack_in),
    .data_out(full_in_AXI_TSTRB_int_regslice),
    .vld_out(regslice_both_full_in_AXI_V_strb_V_U_vld_out),
    .ack_out(full_in_AXI_TREADY_int_regslice),
    .apdone_blk(regslice_both_full_in_AXI_V_strb_V_U_apdone_blk)
);

decode_regslice_both #(
    .DataWidth( 2 ))
regslice_both_full_in_AXI_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(full_in_AXI_TUSER),
    .vld_in(full_in_AXI_TVALID),
    .ack_in(regslice_both_full_in_AXI_V_user_V_U_ack_in),
    .data_out(full_in_AXI_TUSER_int_regslice),
    .vld_out(regslice_both_full_in_AXI_V_user_V_U_vld_out),
    .ack_out(full_in_AXI_TREADY_int_regslice),
    .apdone_blk(regslice_both_full_in_AXI_V_user_V_U_apdone_blk)
);

decode_regslice_both #(
    .DataWidth( 1 ))
regslice_both_full_in_AXI_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(full_in_AXI_TLAST),
    .vld_in(full_in_AXI_TVALID),
    .ack_in(regslice_both_full_in_AXI_V_last_V_U_ack_in),
    .data_out(full_in_AXI_TLAST_int_regslice),
    .vld_out(regslice_both_full_in_AXI_V_last_V_U_vld_out),
    .ack_out(full_in_AXI_TREADY_int_regslice),
    .apdone_blk(regslice_both_full_in_AXI_V_last_V_U_apdone_blk)
);

decode_regslice_both #(
    .DataWidth( 5 ))
regslice_both_full_in_AXI_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(full_in_AXI_TID),
    .vld_in(full_in_AXI_TVALID),
    .ack_in(regslice_both_full_in_AXI_V_id_V_U_ack_in),
    .data_out(full_in_AXI_TID_int_regslice),
    .vld_out(regslice_both_full_in_AXI_V_id_V_U_vld_out),
    .ack_out(full_in_AXI_TREADY_int_regslice),
    .apdone_blk(regslice_both_full_in_AXI_V_id_V_U_apdone_blk)
);

decode_regslice_both #(
    .DataWidth( 6 ))
regslice_both_full_in_AXI_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(full_in_AXI_TDEST),
    .vld_in(full_in_AXI_TVALID),
    .ack_in(regslice_both_full_in_AXI_V_dest_V_U_ack_in),
    .data_out(full_in_AXI_TDEST_int_regslice),
    .vld_out(regslice_both_full_in_AXI_V_dest_V_U_vld_out),
    .ack_out(full_in_AXI_TREADY_int_regslice),
    .apdone_blk(regslice_both_full_in_AXI_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_115)) begin
        if ((icmp_ln8_fu_91_p2 == 1'd0)) begin
            i_fu_54 <= i_4_fu_97_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_54 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_reg_122 <= full_in_AXI_TDATA_int_regslice;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln8_fu_91_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 8'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln8_fu_91_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        full_in_AXI_TDATA_blk_n = full_in_AXI_TVALID_int_regslice;
    end else begin
        full_in_AXI_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_91_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        full_in_AXI_TREADY_int_regslice = 1'b1;
    end else begin
        full_in_AXI_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        full_in_float8_blk_n = full_in_float8_full_n;
    end else begin
        full_in_float8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        full_in_float8_write = 1'b1;
    end else begin
        full_in_float8_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((full_in_float8_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln8_fu_91_p2 == 1'd0) & (full_in_AXI_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((full_in_float8_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln8_fu_91_p2 == 1'd0) & (full_in_AXI_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((full_in_float8_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((icmp_ln8_fu_91_p2 == 1'd0) & (full_in_AXI_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((icmp_ln8_fu_91_p2 == 1'd0) & (full_in_AXI_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (full_in_float8_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_115 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign full_in_AXI_TREADY = regslice_both_full_in_AXI_V_data_V_U_ack_in;

assign full_in_float8_din = tmp_data_V_reg_122;

assign i_4_fu_97_p2 = (ap_sig_allocacmp_i_3 + 8'd1);

assign icmp_ln8_fu_91_p2 = ((ap_sig_allocacmp_i_3 == 8'd128) ? 1'b1 : 1'b0);

assign start_out = real_start;

endmodule //decode_castIn
