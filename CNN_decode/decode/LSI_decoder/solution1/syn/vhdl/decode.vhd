-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decode is
port (
    full_in_TDATA : IN STD_LOGIC_VECTOR (39 downto 0);
    full_out_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    full_in_TVALID : IN STD_LOGIC;
    full_in_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    full_out_TVALID : OUT STD_LOGIC;
    full_out_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of decode is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "decode_decode,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.222700,HLS_SYN_LAT=14928,HLS_SYN_TPT=14619,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=574756,HLS_SYN_LUT=343121,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal conv4_U0_ap_start : STD_LOGIC;
    signal conv4_U0_ap_done : STD_LOGIC;
    signal conv4_U0_ap_continue : STD_LOGIC;
    signal conv4_U0_ap_idle : STD_LOGIC;
    signal conv4_U0_ap_ready : STD_LOGIC;
    signal conv4_U0_conv4_out_din : STD_LOGIC_VECTOR (39 downto 0);
    signal conv4_U0_conv4_out_write : STD_LOGIC;
    signal conv4_U0_start_out : STD_LOGIC;
    signal conv4_U0_start_write : STD_LOGIC;
    signal conv4_U0_full_in_TREADY : STD_LOGIC;
    signal upsamp4_U0_ap_start : STD_LOGIC;
    signal upsamp4_U0_ap_done : STD_LOGIC;
    signal upsamp4_U0_ap_continue : STD_LOGIC;
    signal upsamp4_U0_ap_idle : STD_LOGIC;
    signal upsamp4_U0_ap_ready : STD_LOGIC;
    signal upsamp4_U0_conv4_out_read : STD_LOGIC;
    signal upsamp4_U0_upsamp4_out_din : STD_LOGIC_VECTOR (39 downto 0);
    signal upsamp4_U0_upsamp4_out_write : STD_LOGIC;
    signal upsamp4_U0_start_out : STD_LOGIC;
    signal upsamp4_U0_start_write : STD_LOGIC;
    signal conv5_U0_ap_start : STD_LOGIC;
    signal conv5_U0_ap_done : STD_LOGIC;
    signal conv5_U0_ap_continue : STD_LOGIC;
    signal conv5_U0_ap_idle : STD_LOGIC;
    signal conv5_U0_ap_ready : STD_LOGIC;
    signal conv5_U0_upsamp4_out_read : STD_LOGIC;
    signal conv5_U0_conv5_out_din : STD_LOGIC_VECTOR (39 downto 0);
    signal conv5_U0_conv5_out_write : STD_LOGIC;
    signal conv5_U0_start_out : STD_LOGIC;
    signal conv5_U0_start_write : STD_LOGIC;
    signal upsamp5_U0_ap_start : STD_LOGIC;
    signal upsamp5_U0_ap_done : STD_LOGIC;
    signal upsamp5_U0_ap_continue : STD_LOGIC;
    signal upsamp5_U0_ap_idle : STD_LOGIC;
    signal upsamp5_U0_ap_ready : STD_LOGIC;
    signal upsamp5_U0_conv5_out_read : STD_LOGIC;
    signal upsamp5_U0_upsamp5_out_din : STD_LOGIC_VECTOR (39 downto 0);
    signal upsamp5_U0_upsamp5_out_write : STD_LOGIC;
    signal upsamp5_U0_start_out : STD_LOGIC;
    signal upsamp5_U0_start_write : STD_LOGIC;
    signal conv6_U0_ap_start : STD_LOGIC;
    signal conv6_U0_ap_done : STD_LOGIC;
    signal conv6_U0_ap_continue : STD_LOGIC;
    signal conv6_U0_ap_idle : STD_LOGIC;
    signal conv6_U0_ap_ready : STD_LOGIC;
    signal conv6_U0_conv6_out_din : STD_LOGIC_VECTOR (39 downto 0);
    signal conv6_U0_conv6_out_write : STD_LOGIC;
    signal conv6_U0_start_out : STD_LOGIC;
    signal conv6_U0_start_write : STD_LOGIC;
    signal conv6_U0_upsamp5_out_read : STD_LOGIC;
    signal upsamp6_U0_ap_start : STD_LOGIC;
    signal upsamp6_U0_ap_done : STD_LOGIC;
    signal upsamp6_U0_ap_continue : STD_LOGIC;
    signal upsamp6_U0_ap_idle : STD_LOGIC;
    signal upsamp6_U0_ap_ready : STD_LOGIC;
    signal upsamp6_U0_conv6_out_read : STD_LOGIC;
    signal upsamp6_U0_upsamp6_out_din : STD_LOGIC_VECTOR (39 downto 0);
    signal upsamp6_U0_upsamp6_out_write : STD_LOGIC;
    signal upsamp6_U0_start_out : STD_LOGIC;
    signal upsamp6_U0_start_write : STD_LOGIC;
    signal conv7_U0_ap_start : STD_LOGIC;
    signal conv7_U0_ap_done : STD_LOGIC;
    signal conv7_U0_ap_continue : STD_LOGIC;
    signal conv7_U0_ap_idle : STD_LOGIC;
    signal conv7_U0_ap_ready : STD_LOGIC;
    signal conv7_U0_upsamp6_out_read : STD_LOGIC;
    signal conv7_U0_full_out_TDATA : STD_LOGIC_VECTOR (39 downto 0);
    signal conv7_U0_full_out_TVALID : STD_LOGIC;
    signal conv4_out_full_n : STD_LOGIC;
    signal conv4_out_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal conv4_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal conv4_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal conv4_out_empty_n : STD_LOGIC;
    signal upsamp4_out_full_n : STD_LOGIC;
    signal upsamp4_out_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal upsamp4_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp4_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp4_out_empty_n : STD_LOGIC;
    signal conv5_out_full_n : STD_LOGIC;
    signal conv5_out_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal conv5_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal conv5_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal conv5_out_empty_n : STD_LOGIC;
    signal upsamp5_out_full_n : STD_LOGIC;
    signal upsamp5_out_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal upsamp5_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp5_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp5_out_empty_n : STD_LOGIC;
    signal conv6_out_full_n : STD_LOGIC;
    signal conv6_out_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal conv6_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal conv6_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal conv6_out_empty_n : STD_LOGIC;
    signal upsamp6_out_full_n : STD_LOGIC;
    signal upsamp6_out_dout : STD_LOGIC_VECTOR (39 downto 0);
    signal upsamp6_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp6_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp6_out_empty_n : STD_LOGIC;
    signal start_for_upsamp4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp4_U0_full_n : STD_LOGIC;
    signal start_for_upsamp4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp4_U0_empty_n : STD_LOGIC;
    signal start_for_conv5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv5_U0_full_n : STD_LOGIC;
    signal start_for_conv5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv5_U0_empty_n : STD_LOGIC;
    signal start_for_upsamp5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp5_U0_full_n : STD_LOGIC;
    signal start_for_upsamp5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp5_U0_empty_n : STD_LOGIC;
    signal start_for_conv6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv6_U0_full_n : STD_LOGIC;
    signal start_for_conv6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv6_U0_empty_n : STD_LOGIC;
    signal start_for_upsamp6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp6_U0_full_n : STD_LOGIC;
    signal start_for_upsamp6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp6_U0_empty_n : STD_LOGIC;
    signal start_for_conv7_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv7_U0_full_n : STD_LOGIC;
    signal start_for_conv7_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv7_U0_empty_n : STD_LOGIC;

    component decode_conv4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        full_in_TVALID : IN STD_LOGIC;
        conv4_out_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        conv4_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        conv4_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        conv4_out_full_n : IN STD_LOGIC;
        conv4_out_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        full_in_TDATA : IN STD_LOGIC_VECTOR (39 downto 0);
        full_in_TREADY : OUT STD_LOGIC );
    end component;


    component decode_upsamp4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv4_out_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        conv4_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        conv4_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        conv4_out_empty_n : IN STD_LOGIC;
        conv4_out_read : OUT STD_LOGIC;
        upsamp4_out_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        upsamp4_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp4_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp4_out_full_n : IN STD_LOGIC;
        upsamp4_out_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component decode_conv5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        upsamp4_out_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        upsamp4_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp4_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp4_out_empty_n : IN STD_LOGIC;
        upsamp4_out_read : OUT STD_LOGIC;
        conv5_out_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        conv5_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        conv5_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        conv5_out_full_n : IN STD_LOGIC;
        conv5_out_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component decode_upsamp5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv5_out_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        conv5_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        conv5_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        conv5_out_empty_n : IN STD_LOGIC;
        conv5_out_read : OUT STD_LOGIC;
        upsamp5_out_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        upsamp5_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp5_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp5_out_full_n : IN STD_LOGIC;
        upsamp5_out_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component decode_conv6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv6_out_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        conv6_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        conv6_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        conv6_out_full_n : IN STD_LOGIC;
        conv6_out_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        upsamp5_out_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        upsamp5_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp5_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp5_out_empty_n : IN STD_LOGIC;
        upsamp5_out_read : OUT STD_LOGIC );
    end component;


    component decode_upsamp6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv6_out_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        conv6_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        conv6_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        conv6_out_empty_n : IN STD_LOGIC;
        conv6_out_read : OUT STD_LOGIC;
        upsamp6_out_din : OUT STD_LOGIC_VECTOR (39 downto 0);
        upsamp6_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp6_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp6_out_full_n : IN STD_LOGIC;
        upsamp6_out_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component decode_conv7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        upsamp6_out_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        upsamp6_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp6_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp6_out_empty_n : IN STD_LOGIC;
        upsamp6_out_read : OUT STD_LOGIC;
        full_out_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
        full_out_TVALID : OUT STD_LOGIC;
        full_out_TREADY : IN STD_LOGIC );
    end component;


    component decode_fifo_w40_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (39 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (39 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component decode_start_for_upsamp4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component decode_start_for_conv5_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component decode_start_for_upsamp5_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component decode_start_for_conv6_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component decode_start_for_upsamp6_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component decode_start_for_conv7_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    conv4_U0 : component decode_conv4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv4_U0_ap_start,
        start_full_n => start_for_upsamp4_U0_full_n,
        ap_done => conv4_U0_ap_done,
        ap_continue => conv4_U0_ap_continue,
        ap_idle => conv4_U0_ap_idle,
        ap_ready => conv4_U0_ap_ready,
        full_in_TVALID => full_in_TVALID,
        conv4_out_din => conv4_U0_conv4_out_din,
        conv4_out_num_data_valid => conv4_out_num_data_valid,
        conv4_out_fifo_cap => conv4_out_fifo_cap,
        conv4_out_full_n => conv4_out_full_n,
        conv4_out_write => conv4_U0_conv4_out_write,
        start_out => conv4_U0_start_out,
        start_write => conv4_U0_start_write,
        full_in_TDATA => full_in_TDATA,
        full_in_TREADY => conv4_U0_full_in_TREADY);

    upsamp4_U0 : component decode_upsamp4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => upsamp4_U0_ap_start,
        start_full_n => start_for_conv5_U0_full_n,
        ap_done => upsamp4_U0_ap_done,
        ap_continue => upsamp4_U0_ap_continue,
        ap_idle => upsamp4_U0_ap_idle,
        ap_ready => upsamp4_U0_ap_ready,
        conv4_out_dout => conv4_out_dout,
        conv4_out_num_data_valid => conv4_out_num_data_valid,
        conv4_out_fifo_cap => conv4_out_fifo_cap,
        conv4_out_empty_n => conv4_out_empty_n,
        conv4_out_read => upsamp4_U0_conv4_out_read,
        upsamp4_out_din => upsamp4_U0_upsamp4_out_din,
        upsamp4_out_num_data_valid => upsamp4_out_num_data_valid,
        upsamp4_out_fifo_cap => upsamp4_out_fifo_cap,
        upsamp4_out_full_n => upsamp4_out_full_n,
        upsamp4_out_write => upsamp4_U0_upsamp4_out_write,
        start_out => upsamp4_U0_start_out,
        start_write => upsamp4_U0_start_write);

    conv5_U0 : component decode_conv5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv5_U0_ap_start,
        start_full_n => start_for_upsamp5_U0_full_n,
        ap_done => conv5_U0_ap_done,
        ap_continue => conv5_U0_ap_continue,
        ap_idle => conv5_U0_ap_idle,
        ap_ready => conv5_U0_ap_ready,
        upsamp4_out_dout => upsamp4_out_dout,
        upsamp4_out_num_data_valid => upsamp4_out_num_data_valid,
        upsamp4_out_fifo_cap => upsamp4_out_fifo_cap,
        upsamp4_out_empty_n => upsamp4_out_empty_n,
        upsamp4_out_read => conv5_U0_upsamp4_out_read,
        conv5_out_din => conv5_U0_conv5_out_din,
        conv5_out_num_data_valid => conv5_out_num_data_valid,
        conv5_out_fifo_cap => conv5_out_fifo_cap,
        conv5_out_full_n => conv5_out_full_n,
        conv5_out_write => conv5_U0_conv5_out_write,
        start_out => conv5_U0_start_out,
        start_write => conv5_U0_start_write);

    upsamp5_U0 : component decode_upsamp5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => upsamp5_U0_ap_start,
        start_full_n => start_for_conv6_U0_full_n,
        ap_done => upsamp5_U0_ap_done,
        ap_continue => upsamp5_U0_ap_continue,
        ap_idle => upsamp5_U0_ap_idle,
        ap_ready => upsamp5_U0_ap_ready,
        conv5_out_dout => conv5_out_dout,
        conv5_out_num_data_valid => conv5_out_num_data_valid,
        conv5_out_fifo_cap => conv5_out_fifo_cap,
        conv5_out_empty_n => conv5_out_empty_n,
        conv5_out_read => upsamp5_U0_conv5_out_read,
        upsamp5_out_din => upsamp5_U0_upsamp5_out_din,
        upsamp5_out_num_data_valid => upsamp5_out_num_data_valid,
        upsamp5_out_fifo_cap => upsamp5_out_fifo_cap,
        upsamp5_out_full_n => upsamp5_out_full_n,
        upsamp5_out_write => upsamp5_U0_upsamp5_out_write,
        start_out => upsamp5_U0_start_out,
        start_write => upsamp5_U0_start_write);

    conv6_U0 : component decode_conv6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv6_U0_ap_start,
        start_full_n => start_for_upsamp6_U0_full_n,
        ap_done => conv6_U0_ap_done,
        ap_continue => conv6_U0_ap_continue,
        ap_idle => conv6_U0_ap_idle,
        ap_ready => conv6_U0_ap_ready,
        conv6_out_din => conv6_U0_conv6_out_din,
        conv6_out_num_data_valid => conv6_out_num_data_valid,
        conv6_out_fifo_cap => conv6_out_fifo_cap,
        conv6_out_full_n => conv6_out_full_n,
        conv6_out_write => conv6_U0_conv6_out_write,
        start_out => conv6_U0_start_out,
        start_write => conv6_U0_start_write,
        upsamp5_out_dout => upsamp5_out_dout,
        upsamp5_out_num_data_valid => upsamp5_out_num_data_valid,
        upsamp5_out_fifo_cap => upsamp5_out_fifo_cap,
        upsamp5_out_empty_n => upsamp5_out_empty_n,
        upsamp5_out_read => conv6_U0_upsamp5_out_read);

    upsamp6_U0 : component decode_upsamp6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => upsamp6_U0_ap_start,
        start_full_n => start_for_conv7_U0_full_n,
        ap_done => upsamp6_U0_ap_done,
        ap_continue => upsamp6_U0_ap_continue,
        ap_idle => upsamp6_U0_ap_idle,
        ap_ready => upsamp6_U0_ap_ready,
        conv6_out_dout => conv6_out_dout,
        conv6_out_num_data_valid => conv6_out_num_data_valid,
        conv6_out_fifo_cap => conv6_out_fifo_cap,
        conv6_out_empty_n => conv6_out_empty_n,
        conv6_out_read => upsamp6_U0_conv6_out_read,
        upsamp6_out_din => upsamp6_U0_upsamp6_out_din,
        upsamp6_out_num_data_valid => upsamp6_out_num_data_valid,
        upsamp6_out_fifo_cap => upsamp6_out_fifo_cap,
        upsamp6_out_full_n => upsamp6_out_full_n,
        upsamp6_out_write => upsamp6_U0_upsamp6_out_write,
        start_out => upsamp6_U0_start_out,
        start_write => upsamp6_U0_start_write);

    conv7_U0 : component decode_conv7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => conv7_U0_ap_start,
        ap_done => conv7_U0_ap_done,
        ap_continue => conv7_U0_ap_continue,
        ap_idle => conv7_U0_ap_idle,
        ap_ready => conv7_U0_ap_ready,
        upsamp6_out_dout => upsamp6_out_dout,
        upsamp6_out_num_data_valid => upsamp6_out_num_data_valid,
        upsamp6_out_fifo_cap => upsamp6_out_fifo_cap,
        upsamp6_out_empty_n => upsamp6_out_empty_n,
        upsamp6_out_read => conv7_U0_upsamp6_out_read,
        full_out_TDATA => conv7_U0_full_out_TDATA,
        full_out_TVALID => conv7_U0_full_out_TVALID,
        full_out_TREADY => full_out_TREADY);

    conv4_out_U : component decode_fifo_w40_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv4_U0_conv4_out_din,
        if_full_n => conv4_out_full_n,
        if_write => conv4_U0_conv4_out_write,
        if_dout => conv4_out_dout,
        if_num_data_valid => conv4_out_num_data_valid,
        if_fifo_cap => conv4_out_fifo_cap,
        if_empty_n => conv4_out_empty_n,
        if_read => upsamp4_U0_conv4_out_read);

    upsamp4_out_U : component decode_fifo_w40_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => upsamp4_U0_upsamp4_out_din,
        if_full_n => upsamp4_out_full_n,
        if_write => upsamp4_U0_upsamp4_out_write,
        if_dout => upsamp4_out_dout,
        if_num_data_valid => upsamp4_out_num_data_valid,
        if_fifo_cap => upsamp4_out_fifo_cap,
        if_empty_n => upsamp4_out_empty_n,
        if_read => conv5_U0_upsamp4_out_read);

    conv5_out_U : component decode_fifo_w40_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv5_U0_conv5_out_din,
        if_full_n => conv5_out_full_n,
        if_write => conv5_U0_conv5_out_write,
        if_dout => conv5_out_dout,
        if_num_data_valid => conv5_out_num_data_valid,
        if_fifo_cap => conv5_out_fifo_cap,
        if_empty_n => conv5_out_empty_n,
        if_read => upsamp5_U0_conv5_out_read);

    upsamp5_out_U : component decode_fifo_w40_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => upsamp5_U0_upsamp5_out_din,
        if_full_n => upsamp5_out_full_n,
        if_write => upsamp5_U0_upsamp5_out_write,
        if_dout => upsamp5_out_dout,
        if_num_data_valid => upsamp5_out_num_data_valid,
        if_fifo_cap => upsamp5_out_fifo_cap,
        if_empty_n => upsamp5_out_empty_n,
        if_read => conv6_U0_upsamp5_out_read);

    conv6_out_U : component decode_fifo_w40_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv6_U0_conv6_out_din,
        if_full_n => conv6_out_full_n,
        if_write => conv6_U0_conv6_out_write,
        if_dout => conv6_out_dout,
        if_num_data_valid => conv6_out_num_data_valid,
        if_fifo_cap => conv6_out_fifo_cap,
        if_empty_n => conv6_out_empty_n,
        if_read => upsamp6_U0_conv6_out_read);

    upsamp6_out_U : component decode_fifo_w40_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => upsamp6_U0_upsamp6_out_din,
        if_full_n => upsamp6_out_full_n,
        if_write => upsamp6_U0_upsamp6_out_write,
        if_dout => upsamp6_out_dout,
        if_num_data_valid => upsamp6_out_num_data_valid,
        if_fifo_cap => upsamp6_out_fifo_cap,
        if_empty_n => upsamp6_out_empty_n,
        if_read => conv7_U0_upsamp6_out_read);

    start_for_upsamp4_U0_U : component decode_start_for_upsamp4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_upsamp4_U0_din,
        if_full_n => start_for_upsamp4_U0_full_n,
        if_write => conv4_U0_start_write,
        if_dout => start_for_upsamp4_U0_dout,
        if_empty_n => start_for_upsamp4_U0_empty_n,
        if_read => upsamp4_U0_ap_ready);

    start_for_conv5_U0_U : component decode_start_for_conv5_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv5_U0_din,
        if_full_n => start_for_conv5_U0_full_n,
        if_write => upsamp4_U0_start_write,
        if_dout => start_for_conv5_U0_dout,
        if_empty_n => start_for_conv5_U0_empty_n,
        if_read => conv5_U0_ap_ready);

    start_for_upsamp5_U0_U : component decode_start_for_upsamp5_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_upsamp5_U0_din,
        if_full_n => start_for_upsamp5_U0_full_n,
        if_write => conv5_U0_start_write,
        if_dout => start_for_upsamp5_U0_dout,
        if_empty_n => start_for_upsamp5_U0_empty_n,
        if_read => upsamp5_U0_ap_ready);

    start_for_conv6_U0_U : component decode_start_for_conv6_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv6_U0_din,
        if_full_n => start_for_conv6_U0_full_n,
        if_write => upsamp5_U0_start_write,
        if_dout => start_for_conv6_U0_dout,
        if_empty_n => start_for_conv6_U0_empty_n,
        if_read => conv6_U0_ap_ready);

    start_for_upsamp6_U0_U : component decode_start_for_upsamp6_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_upsamp6_U0_din,
        if_full_n => start_for_upsamp6_U0_full_n,
        if_write => conv6_U0_start_write,
        if_dout => start_for_upsamp6_U0_dout,
        if_empty_n => start_for_upsamp6_U0_empty_n,
        if_read => upsamp6_U0_ap_ready);

    start_for_conv7_U0_U : component decode_start_for_conv7_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv7_U0_din,
        if_full_n => start_for_conv7_U0_full_n,
        if_write => upsamp6_U0_start_write,
        if_dout => start_for_conv7_U0_dout,
        if_empty_n => start_for_conv7_U0_empty_n,
        if_read => conv7_U0_ap_ready);




    ap_done <= conv7_U0_ap_done;
    ap_idle <= (upsamp6_U0_ap_idle and upsamp5_U0_ap_idle and upsamp4_U0_ap_idle and conv7_U0_ap_idle and conv6_U0_ap_idle and conv5_U0_ap_idle and conv4_U0_ap_idle);
    ap_ready <= conv4_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    conv4_U0_ap_continue <= ap_const_logic_1;
    conv4_U0_ap_start <= ap_start;
    conv5_U0_ap_continue <= ap_const_logic_1;
    conv5_U0_ap_start <= start_for_conv5_U0_empty_n;
    conv6_U0_ap_continue <= ap_const_logic_1;
    conv6_U0_ap_start <= start_for_conv6_U0_empty_n;
    conv7_U0_ap_continue <= ap_const_logic_1;
    conv7_U0_ap_start <= start_for_conv7_U0_empty_n;
    full_in_TREADY <= conv4_U0_full_in_TREADY;
    full_out_TDATA <= conv7_U0_full_out_TDATA;
    full_out_TVALID <= conv7_U0_full_out_TVALID;
    start_for_conv5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv7_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_upsamp4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_upsamp5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_upsamp6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    upsamp4_U0_ap_continue <= ap_const_logic_1;
    upsamp4_U0_ap_start <= start_for_upsamp4_U0_empty_n;
    upsamp5_U0_ap_continue <= ap_const_logic_1;
    upsamp5_U0_ap_start <= start_for_upsamp5_U0_empty_n;
    upsamp6_U0_ap_continue <= ap_const_logic_1;
    upsamp6_U0_ap_start <= start_for_upsamp6_U0_empty_n;
end behav;
