-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AutoEncoder_upsamp6 is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    conv6_out26_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    conv6_out26_empty_n : IN STD_LOGIC;
    conv6_out26_read : OUT STD_LOGIC;
    upsamp6_out27_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    upsamp6_out27_full_n : IN STD_LOGIC;
    upsamp6_out27_write : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of AutoEncoder_upsamp6 is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal upsam_buf6_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal upsam_buf6_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_start : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_done : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_continue : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_idle : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_ready : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_conv6_out26_read : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsamp6_out27_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsamp6_out27_write : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_ce0 : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_we0 : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_ce1 : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_we1 : STD_LOGIC;
    signal sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_ready : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component AutoEncoder_sp_upsamp_ap_fixed_32_6_5_3_0_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv6_out26_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv6_out26_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        conv6_out26_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        conv6_out26_empty_n : IN STD_LOGIC;
        conv6_out26_read : OUT STD_LOGIC;
        upsamp6_out27_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        upsamp6_out27_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp6_out27_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        upsamp6_out27_full_n : IN STD_LOGIC;
        upsamp6_out27_write : OUT STD_LOGIC;
        upsam_buf_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        upsam_buf_ce0 : OUT STD_LOGIC;
        upsam_buf_we0 : OUT STD_LOGIC;
        upsam_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        upsam_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        upsam_buf_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        upsam_buf_ce1 : OUT STD_LOGIC;
        upsam_buf_we1 : OUT STD_LOGIC;
        upsam_buf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        upsam_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AutoEncoder_upsamp6_upsam_buf6_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    upsam_buf6_V_U : component AutoEncoder_upsamp6_upsam_buf6_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_address0,
        ce0 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_ce0,
        we0 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_we0,
        d0 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_d0,
        q0 => upsam_buf6_V_q0,
        address1 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_address1,
        ce1 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_ce1,
        we1 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_we1,
        d1 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_d1,
        q1 => upsam_buf6_V_q1);

    sp_upsamp_ap_fixed_32_6_5_3_0_4_U0 : component AutoEncoder_sp_upsamp_ap_fixed_32_6_5_3_0_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_start,
        ap_done => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_done,
        ap_continue => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_continue,
        ap_idle => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_idle,
        ap_ready => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_ready,
        conv6_out26_dout => conv6_out26_dout,
        conv6_out26_num_data_valid => ap_const_lv2_0,
        conv6_out26_fifo_cap => ap_const_lv2_0,
        conv6_out26_empty_n => conv6_out26_empty_n,
        conv6_out26_read => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_conv6_out26_read,
        upsamp6_out27_din => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsamp6_out27_din,
        upsamp6_out27_num_data_valid => ap_const_lv2_0,
        upsamp6_out27_fifo_cap => ap_const_lv2_0,
        upsamp6_out27_full_n => upsamp6_out27_full_n,
        upsamp6_out27_write => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsamp6_out27_write,
        upsam_buf_address0 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_address0,
        upsam_buf_ce0 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_ce0,
        upsam_buf_we0 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_we0,
        upsam_buf_d0 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_d0,
        upsam_buf_q0 => upsam_buf6_V_q0,
        upsam_buf_address1 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_address1,
        upsam_buf_ce1 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_ce1,
        upsam_buf_we1 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_we1,
        upsam_buf_d1 => sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsam_buf_d1,
        upsam_buf_q1 => upsam_buf6_V_q1);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_done;
    ap_idle <= sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_idle;
    ap_ready <= sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_ready;
    ap_sync_ready <= sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_ready;
    conv6_out26_read <= sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_conv6_out26_read;
    internal_ap_ready <= ap_sync_ready;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_continue <= ap_continue;
    sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_ap_start <= real_start;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    upsamp6_out27_din <= sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsamp6_out27_din;
    upsamp6_out27_write <= sp_upsamp_ap_fixed_32_6_5_3_0_4_U0_upsamp6_out27_write;
end behav;
