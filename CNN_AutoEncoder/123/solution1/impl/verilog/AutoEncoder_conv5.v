// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AutoEncoder_conv5 (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        upsamp4_out23_dout,
        upsamp4_out23_empty_n,
        upsamp4_out23_read,
        conv5_out24_din,
        conv5_out24_full_n,
        conv5_out24_write,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [31:0] upsamp4_out23_dout;
input   upsamp4_out23_empty_n;
output   upsamp4_out23_read;
output  [31:0] conv5_out24_din;
input   conv5_out24_full_n;
output   conv5_out24_write;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    conv5_Loop_CHeight_proc24_U0_ap_start;
wire    conv5_Loop_CHeight_proc24_U0_ap_done;
wire    conv5_Loop_CHeight_proc24_U0_ap_continue;
wire    conv5_Loop_CHeight_proc24_U0_ap_idle;
wire    conv5_Loop_CHeight_proc24_U0_ap_ready;
wire    conv5_Loop_CHeight_proc24_U0_upsamp4_out23_read;
wire   [31:0] conv5_Loop_CHeight_proc24_U0_conv5_out24_din;
wire    conv5_Loop_CHeight_proc24_U0_conv5_out24_write;
wire    ap_sync_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
end

AutoEncoder_conv5_Loop_CHeight_proc24 conv5_Loop_CHeight_proc24_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(conv5_Loop_CHeight_proc24_U0_ap_start),
    .ap_done(conv5_Loop_CHeight_proc24_U0_ap_done),
    .ap_continue(conv5_Loop_CHeight_proc24_U0_ap_continue),
    .ap_idle(conv5_Loop_CHeight_proc24_U0_ap_idle),
    .ap_ready(conv5_Loop_CHeight_proc24_U0_ap_ready),
    .upsamp4_out23_dout(upsamp4_out23_dout),
    .upsamp4_out23_num_data_valid(2'd0),
    .upsamp4_out23_fifo_cap(2'd0),
    .upsamp4_out23_empty_n(upsamp4_out23_empty_n),
    .upsamp4_out23_read(conv5_Loop_CHeight_proc24_U0_upsamp4_out23_read),
    .conv5_out24_din(conv5_Loop_CHeight_proc24_U0_conv5_out24_din),
    .conv5_out24_num_data_valid(2'd0),
    .conv5_out24_fifo_cap(2'd0),
    .conv5_out24_full_n(conv5_out24_full_n),
    .conv5_out24_write(conv5_Loop_CHeight_proc24_U0_conv5_out24_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = conv5_Loop_CHeight_proc24_U0_ap_done;

assign ap_idle = conv5_Loop_CHeight_proc24_U0_ap_idle;

assign ap_ready = conv5_Loop_CHeight_proc24_U0_ap_ready;

assign ap_sync_ready = conv5_Loop_CHeight_proc24_U0_ap_ready;

assign conv5_Loop_CHeight_proc24_U0_ap_continue = ap_continue;

assign conv5_Loop_CHeight_proc24_U0_ap_start = real_start;

assign conv5_out24_din = conv5_Loop_CHeight_proc24_U0_conv5_out24_din;

assign conv5_out24_write = conv5_Loop_CHeight_proc24_U0_conv5_out24_write;

assign internal_ap_ready = ap_sync_ready;

assign start_out = real_start;

assign upsamp4_out23_read = conv5_Loop_CHeight_proc24_U0_upsamp4_out23_read;

endmodule //AutoEncoder_conv5
