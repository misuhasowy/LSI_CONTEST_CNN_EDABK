-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AutoEncoder is
port (
    full_in_AXI_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    full_in_AXI_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    full_in_AXI_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    full_in_AXI_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    full_in_AXI_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    full_in_AXI_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    full_in_AXI_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    full_out_AXI_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    full_out_AXI_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    full_out_AXI_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    full_out_AXI_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    full_out_AXI_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    full_out_AXI_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    full_out_AXI_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    full_in_AXI_TVALID : IN STD_LOGIC;
    full_in_AXI_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    full_out_AXI_TVALID : OUT STD_LOGIC;
    full_out_AXI_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of AutoEncoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AutoEncoder_AutoEncoder,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.298938,HLS_SYN_LAT=14507,HLS_SYN_TPT=14450,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=410249,HLS_SYN_LUT=458106,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal castIn_U0_ap_start : STD_LOGIC;
    signal castIn_U0_ap_done : STD_LOGIC;
    signal castIn_U0_ap_continue : STD_LOGIC;
    signal castIn_U0_ap_idle : STD_LOGIC;
    signal castIn_U0_ap_ready : STD_LOGIC;
    signal castIn_U0_full_in_float14_din : STD_LOGIC_VECTOR (31 downto 0);
    signal castIn_U0_full_in_float14_write : STD_LOGIC;
    signal castIn_U0_start_out : STD_LOGIC;
    signal castIn_U0_start_write : STD_LOGIC;
    signal castIn_U0_full_in_AXI_TREADY : STD_LOGIC;
    signal conv1_U0_ap_start : STD_LOGIC;
    signal conv1_U0_start_out : STD_LOGIC;
    signal conv1_U0_start_write : STD_LOGIC;
    signal conv1_U0_full_in_float14_read : STD_LOGIC;
    signal conv1_U0_conv1_out16_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_U0_conv1_out16_write : STD_LOGIC;
    signal conv1_U0_ap_done : STD_LOGIC;
    signal conv1_U0_ap_ready : STD_LOGIC;
    signal conv1_U0_ap_idle : STD_LOGIC;
    signal conv1_U0_ap_continue : STD_LOGIC;
    signal pool1_U0_ap_start : STD_LOGIC;
    signal pool1_U0_start_out : STD_LOGIC;
    signal pool1_U0_start_write : STD_LOGIC;
    signal pool1_U0_conv1_out16_read : STD_LOGIC;
    signal pool1_U0_pool1_out17_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_U0_pool1_out17_write : STD_LOGIC;
    signal pool1_U0_ap_done : STD_LOGIC;
    signal pool1_U0_ap_ready : STD_LOGIC;
    signal pool1_U0_ap_idle : STD_LOGIC;
    signal pool1_U0_ap_continue : STD_LOGIC;
    signal conv2_U0_ap_start : STD_LOGIC;
    signal conv2_U0_start_out : STD_LOGIC;
    signal conv2_U0_start_write : STD_LOGIC;
    signal conv2_U0_pool1_out17_read : STD_LOGIC;
    signal conv2_U0_conv2_out18_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_U0_conv2_out18_write : STD_LOGIC;
    signal conv2_U0_ap_done : STD_LOGIC;
    signal conv2_U0_ap_ready : STD_LOGIC;
    signal conv2_U0_ap_idle : STD_LOGIC;
    signal conv2_U0_ap_continue : STD_LOGIC;
    signal pool2_U0_ap_start : STD_LOGIC;
    signal pool2_U0_start_out : STD_LOGIC;
    signal pool2_U0_start_write : STD_LOGIC;
    signal pool2_U0_conv2_out18_read : STD_LOGIC;
    signal pool2_U0_pool2_out19_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2_U0_pool2_out19_write : STD_LOGIC;
    signal pool2_U0_ap_done : STD_LOGIC;
    signal pool2_U0_ap_ready : STD_LOGIC;
    signal pool2_U0_ap_idle : STD_LOGIC;
    signal pool2_U0_ap_continue : STD_LOGIC;
    signal conv3_U0_ap_start : STD_LOGIC;
    signal conv3_U0_start_out : STD_LOGIC;
    signal conv3_U0_start_write : STD_LOGIC;
    signal conv3_U0_pool2_out19_read : STD_LOGIC;
    signal conv3_U0_conv3_out20_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_U0_conv3_out20_write : STD_LOGIC;
    signal conv3_U0_ap_done : STD_LOGIC;
    signal conv3_U0_ap_ready : STD_LOGIC;
    signal conv3_U0_ap_idle : STD_LOGIC;
    signal conv3_U0_ap_continue : STD_LOGIC;
    signal pool3_U0_ap_start : STD_LOGIC;
    signal pool3_U0_start_out : STD_LOGIC;
    signal pool3_U0_start_write : STD_LOGIC;
    signal pool3_U0_conv3_out20_read : STD_LOGIC;
    signal pool3_U0_pool3_out21_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pool3_U0_pool3_out21_write : STD_LOGIC;
    signal pool3_U0_ap_done : STD_LOGIC;
    signal pool3_U0_ap_ready : STD_LOGIC;
    signal pool3_U0_ap_idle : STD_LOGIC;
    signal pool3_U0_ap_continue : STD_LOGIC;
    signal conv4_U0_ap_start : STD_LOGIC;
    signal conv4_U0_start_out : STD_LOGIC;
    signal conv4_U0_start_write : STD_LOGIC;
    signal conv4_U0_pool3_out21_read : STD_LOGIC;
    signal conv4_U0_conv4_out22_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv4_U0_conv4_out22_write : STD_LOGIC;
    signal conv4_U0_ap_done : STD_LOGIC;
    signal conv4_U0_ap_ready : STD_LOGIC;
    signal conv4_U0_ap_idle : STD_LOGIC;
    signal conv4_U0_ap_continue : STD_LOGIC;
    signal upsamp4_U0_ap_start : STD_LOGIC;
    signal upsamp4_U0_start_out : STD_LOGIC;
    signal upsamp4_U0_start_write : STD_LOGIC;
    signal upsamp4_U0_conv4_out22_read : STD_LOGIC;
    signal upsamp4_U0_upsamp4_out23_din : STD_LOGIC_VECTOR (31 downto 0);
    signal upsamp4_U0_upsamp4_out23_write : STD_LOGIC;
    signal upsamp4_U0_ap_done : STD_LOGIC;
    signal upsamp4_U0_ap_ready : STD_LOGIC;
    signal upsamp4_U0_ap_idle : STD_LOGIC;
    signal upsamp4_U0_ap_continue : STD_LOGIC;
    signal conv5_U0_ap_start : STD_LOGIC;
    signal conv5_U0_start_out : STD_LOGIC;
    signal conv5_U0_start_write : STD_LOGIC;
    signal conv5_U0_upsamp4_out23_read : STD_LOGIC;
    signal conv5_U0_conv5_out24_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv5_U0_conv5_out24_write : STD_LOGIC;
    signal conv5_U0_ap_done : STD_LOGIC;
    signal conv5_U0_ap_ready : STD_LOGIC;
    signal conv5_U0_ap_idle : STD_LOGIC;
    signal conv5_U0_ap_continue : STD_LOGIC;
    signal upsamp5_U0_ap_start : STD_LOGIC;
    signal upsamp5_U0_start_out : STD_LOGIC;
    signal upsamp5_U0_start_write : STD_LOGIC;
    signal upsamp5_U0_conv5_out24_read : STD_LOGIC;
    signal upsamp5_U0_upsamp5_out25_din : STD_LOGIC_VECTOR (31 downto 0);
    signal upsamp5_U0_upsamp5_out25_write : STD_LOGIC;
    signal upsamp5_U0_ap_done : STD_LOGIC;
    signal upsamp5_U0_ap_ready : STD_LOGIC;
    signal upsamp5_U0_ap_idle : STD_LOGIC;
    signal upsamp5_U0_ap_continue : STD_LOGIC;
    signal conv6_U0_ap_start : STD_LOGIC;
    signal conv6_U0_start_out : STD_LOGIC;
    signal conv6_U0_start_write : STD_LOGIC;
    signal conv6_U0_upsamp5_out25_read : STD_LOGIC;
    signal conv6_U0_conv6_out26_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv6_U0_conv6_out26_write : STD_LOGIC;
    signal conv6_U0_ap_done : STD_LOGIC;
    signal conv6_U0_ap_ready : STD_LOGIC;
    signal conv6_U0_ap_idle : STD_LOGIC;
    signal conv6_U0_ap_continue : STD_LOGIC;
    signal upsamp6_U0_ap_start : STD_LOGIC;
    signal upsamp6_U0_start_out : STD_LOGIC;
    signal upsamp6_U0_start_write : STD_LOGIC;
    signal upsamp6_U0_conv6_out26_read : STD_LOGIC;
    signal upsamp6_U0_upsamp6_out27_din : STD_LOGIC_VECTOR (31 downto 0);
    signal upsamp6_U0_upsamp6_out27_write : STD_LOGIC;
    signal upsamp6_U0_ap_done : STD_LOGIC;
    signal upsamp6_U0_ap_ready : STD_LOGIC;
    signal upsamp6_U0_ap_idle : STD_LOGIC;
    signal upsamp6_U0_ap_continue : STD_LOGIC;
    signal conv7_U0_ap_start : STD_LOGIC;
    signal conv7_U0_start_out : STD_LOGIC;
    signal conv7_U0_start_write : STD_LOGIC;
    signal conv7_U0_upsamp6_out27_read : STD_LOGIC;
    signal conv7_U0_full_out_float15_din : STD_LOGIC_VECTOR (31 downto 0);
    signal conv7_U0_full_out_float15_write : STD_LOGIC;
    signal conv7_U0_ap_done : STD_LOGIC;
    signal conv7_U0_ap_ready : STD_LOGIC;
    signal conv7_U0_ap_idle : STD_LOGIC;
    signal conv7_U0_ap_continue : STD_LOGIC;
    signal castOut_U0_ap_start : STD_LOGIC;
    signal castOut_U0_ap_done : STD_LOGIC;
    signal castOut_U0_ap_continue : STD_LOGIC;
    signal castOut_U0_ap_idle : STD_LOGIC;
    signal castOut_U0_ap_ready : STD_LOGIC;
    signal castOut_U0_full_out_float15_read : STD_LOGIC;
    signal castOut_U0_full_out_AXI_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal castOut_U0_full_out_AXI_TVALID : STD_LOGIC;
    signal castOut_U0_full_out_AXI_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal castOut_U0_full_out_AXI_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal castOut_U0_full_out_AXI_TUSER : STD_LOGIC_VECTOR (1 downto 0);
    signal castOut_U0_full_out_AXI_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal castOut_U0_full_out_AXI_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal castOut_U0_full_out_AXI_TDEST : STD_LOGIC_VECTOR (5 downto 0);
    signal full_in_float_full_n : STD_LOGIC;
    signal full_in_float_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal full_in_float_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal full_in_float_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal full_in_float_empty_n : STD_LOGIC;
    signal conv1_out_full_n : STD_LOGIC;
    signal conv1_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal conv1_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal conv1_out_empty_n : STD_LOGIC;
    signal pool1_out_full_n : STD_LOGIC;
    signal pool1_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal pool1_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal pool1_out_empty_n : STD_LOGIC;
    signal conv2_out_full_n : STD_LOGIC;
    signal conv2_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal conv2_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal conv2_out_empty_n : STD_LOGIC;
    signal pool2_out_full_n : STD_LOGIC;
    signal pool2_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal pool2_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal pool2_out_empty_n : STD_LOGIC;
    signal conv3_out_full_n : STD_LOGIC;
    signal conv3_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal conv3_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal conv3_out_empty_n : STD_LOGIC;
    signal pool3_out_full_n : STD_LOGIC;
    signal pool3_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal pool3_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal pool3_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal pool3_out_empty_n : STD_LOGIC;
    signal conv4_out_full_n : STD_LOGIC;
    signal conv4_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv4_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal conv4_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal conv4_out_empty_n : STD_LOGIC;
    signal upsamp4_out_full_n : STD_LOGIC;
    signal upsamp4_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal upsamp4_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp4_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp4_out_empty_n : STD_LOGIC;
    signal conv5_out_full_n : STD_LOGIC;
    signal conv5_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv5_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal conv5_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal conv5_out_empty_n : STD_LOGIC;
    signal upsamp5_out_full_n : STD_LOGIC;
    signal upsamp5_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal upsamp5_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp5_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp5_out_empty_n : STD_LOGIC;
    signal conv6_out_full_n : STD_LOGIC;
    signal conv6_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal conv6_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal conv6_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal conv6_out_empty_n : STD_LOGIC;
    signal upsamp6_out_full_n : STD_LOGIC;
    signal upsamp6_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal upsamp6_out_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp6_out_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal upsamp6_out_empty_n : STD_LOGIC;
    signal full_out_float_full_n : STD_LOGIC;
    signal full_out_float_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal full_out_float_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal full_out_float_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal full_out_float_empty_n : STD_LOGIC;
    signal start_for_conv1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv1_U0_full_n : STD_LOGIC;
    signal start_for_conv1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv1_U0_empty_n : STD_LOGIC;
    signal start_for_pool1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool1_U0_full_n : STD_LOGIC;
    signal start_for_pool1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool1_U0_empty_n : STD_LOGIC;
    signal start_for_conv2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv2_U0_full_n : STD_LOGIC;
    signal start_for_conv2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv2_U0_empty_n : STD_LOGIC;
    signal start_for_pool2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool2_U0_full_n : STD_LOGIC;
    signal start_for_pool2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool2_U0_empty_n : STD_LOGIC;
    signal start_for_conv3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv3_U0_full_n : STD_LOGIC;
    signal start_for_conv3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv3_U0_empty_n : STD_LOGIC;
    signal start_for_pool3_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool3_U0_full_n : STD_LOGIC;
    signal start_for_pool3_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool3_U0_empty_n : STD_LOGIC;
    signal start_for_conv4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv4_U0_full_n : STD_LOGIC;
    signal start_for_conv4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv4_U0_empty_n : STD_LOGIC;
    signal start_for_upsamp4_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp4_U0_full_n : STD_LOGIC;
    signal start_for_upsamp4_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp4_U0_empty_n : STD_LOGIC;
    signal start_for_conv5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv5_U0_full_n : STD_LOGIC;
    signal start_for_conv5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv5_U0_empty_n : STD_LOGIC;
    signal start_for_upsamp5_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp5_U0_full_n : STD_LOGIC;
    signal start_for_upsamp5_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp5_U0_empty_n : STD_LOGIC;
    signal start_for_conv6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv6_U0_full_n : STD_LOGIC;
    signal start_for_conv6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv6_U0_empty_n : STD_LOGIC;
    signal start_for_upsamp6_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp6_U0_full_n : STD_LOGIC;
    signal start_for_upsamp6_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_upsamp6_U0_empty_n : STD_LOGIC;
    signal start_for_conv7_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv7_U0_full_n : STD_LOGIC;
    signal start_for_conv7_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_conv7_U0_empty_n : STD_LOGIC;
    signal start_for_castOut_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_castOut_U0_full_n : STD_LOGIC;
    signal start_for_castOut_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_castOut_U0_empty_n : STD_LOGIC;

    component AutoEncoder_castIn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        full_in_AXI_TVALID : IN STD_LOGIC;
        full_in_float14_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        full_in_float14_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        full_in_float14_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        full_in_float14_full_n : IN STD_LOGIC;
        full_in_float14_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        full_in_AXI_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        full_in_AXI_TREADY : OUT STD_LOGIC;
        full_in_AXI_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        full_in_AXI_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        full_in_AXI_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
        full_in_AXI_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        full_in_AXI_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        full_in_AXI_TDEST : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component AutoEncoder_conv1 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        full_in_float14_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        full_in_float14_empty_n : IN STD_LOGIC;
        full_in_float14_read : OUT STD_LOGIC;
        conv1_out16_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv1_out16_full_n : IN STD_LOGIC;
        conv1_out16_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_pool1 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv1_out16_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_out16_empty_n : IN STD_LOGIC;
        conv1_out16_read : OUT STD_LOGIC;
        pool1_out17_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool1_out17_full_n : IN STD_LOGIC;
        pool1_out17_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_conv2 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        pool1_out17_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pool1_out17_empty_n : IN STD_LOGIC;
        pool1_out17_read : OUT STD_LOGIC;
        conv2_out18_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv2_out18_full_n : IN STD_LOGIC;
        conv2_out18_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_pool2 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv2_out18_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv2_out18_empty_n : IN STD_LOGIC;
        conv2_out18_read : OUT STD_LOGIC;
        pool2_out19_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool2_out19_full_n : IN STD_LOGIC;
        pool2_out19_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_conv3 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        pool2_out19_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pool2_out19_empty_n : IN STD_LOGIC;
        pool2_out19_read : OUT STD_LOGIC;
        conv3_out20_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv3_out20_full_n : IN STD_LOGIC;
        conv3_out20_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_pool3 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        conv3_out20_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv3_out20_empty_n : IN STD_LOGIC;
        conv3_out20_read : OUT STD_LOGIC;
        pool3_out21_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool3_out21_full_n : IN STD_LOGIC;
        pool3_out21_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_conv4 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        pool3_out21_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pool3_out21_empty_n : IN STD_LOGIC;
        pool3_out21_read : OUT STD_LOGIC;
        conv4_out22_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv4_out22_full_n : IN STD_LOGIC;
        conv4_out22_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_upsamp4 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        conv4_out22_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv4_out22_empty_n : IN STD_LOGIC;
        conv4_out22_read : OUT STD_LOGIC;
        upsamp4_out23_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        upsamp4_out23_full_n : IN STD_LOGIC;
        upsamp4_out23_write : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_conv5 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        upsamp4_out23_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        upsamp4_out23_empty_n : IN STD_LOGIC;
        upsamp4_out23_read : OUT STD_LOGIC;
        conv5_out24_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv5_out24_full_n : IN STD_LOGIC;
        conv5_out24_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_upsamp5 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        conv5_out24_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv5_out24_empty_n : IN STD_LOGIC;
        conv5_out24_read : OUT STD_LOGIC;
        upsamp5_out25_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        upsamp5_out25_full_n : IN STD_LOGIC;
        upsamp5_out25_write : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_conv6 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        upsamp5_out25_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        upsamp5_out25_empty_n : IN STD_LOGIC;
        upsamp5_out25_read : OUT STD_LOGIC;
        conv6_out26_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv6_out26_full_n : IN STD_LOGIC;
        conv6_out26_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_upsamp6 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        conv6_out26_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        conv6_out26_empty_n : IN STD_LOGIC;
        conv6_out26_read : OUT STD_LOGIC;
        upsamp6_out27_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        upsamp6_out27_full_n : IN STD_LOGIC;
        upsamp6_out27_write : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_conv7 IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        upsamp6_out27_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        upsamp6_out27_empty_n : IN STD_LOGIC;
        upsamp6_out27_read : OUT STD_LOGIC;
        full_out_float15_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        full_out_float15_full_n : IN STD_LOGIC;
        full_out_float15_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AutoEncoder_castOut IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        full_out_float15_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        full_out_float15_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        full_out_float15_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        full_out_float15_empty_n : IN STD_LOGIC;
        full_out_float15_read : OUT STD_LOGIC;
        full_out_AXI_TREADY : IN STD_LOGIC;
        full_out_AXI_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        full_out_AXI_TVALID : OUT STD_LOGIC;
        full_out_AXI_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        full_out_AXI_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        full_out_AXI_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
        full_out_AXI_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        full_out_AXI_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        full_out_AXI_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component AutoEncoder_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_conv1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_pool1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_conv2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_pool2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_conv3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_pool3_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_conv4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_upsamp4_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_conv5_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_upsamp5_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_conv6_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_upsamp6_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_conv7_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component AutoEncoder_start_for_castOut_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    castIn_U0 : component AutoEncoder_castIn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => castIn_U0_ap_start,
        start_full_n => start_for_conv1_U0_full_n,
        ap_done => castIn_U0_ap_done,
        ap_continue => castIn_U0_ap_continue,
        ap_idle => castIn_U0_ap_idle,
        ap_ready => castIn_U0_ap_ready,
        full_in_AXI_TVALID => full_in_AXI_TVALID,
        full_in_float14_din => castIn_U0_full_in_float14_din,
        full_in_float14_num_data_valid => full_in_float_num_data_valid,
        full_in_float14_fifo_cap => full_in_float_fifo_cap,
        full_in_float14_full_n => full_in_float_full_n,
        full_in_float14_write => castIn_U0_full_in_float14_write,
        start_out => castIn_U0_start_out,
        start_write => castIn_U0_start_write,
        full_in_AXI_TDATA => full_in_AXI_TDATA,
        full_in_AXI_TREADY => castIn_U0_full_in_AXI_TREADY,
        full_in_AXI_TKEEP => full_in_AXI_TKEEP,
        full_in_AXI_TSTRB => full_in_AXI_TSTRB,
        full_in_AXI_TUSER => full_in_AXI_TUSER,
        full_in_AXI_TLAST => full_in_AXI_TLAST,
        full_in_AXI_TID => full_in_AXI_TID,
        full_in_AXI_TDEST => full_in_AXI_TDEST);

    conv1_U0 : component AutoEncoder_conv1
    port map (
        ap_start => conv1_U0_ap_start,
        start_full_n => start_for_pool1_U0_full_n,
        start_out => conv1_U0_start_out,
        start_write => conv1_U0_start_write,
        full_in_float14_dout => full_in_float_dout,
        full_in_float14_empty_n => full_in_float_empty_n,
        full_in_float14_read => conv1_U0_full_in_float14_read,
        conv1_out16_din => conv1_U0_conv1_out16_din,
        conv1_out16_full_n => conv1_out_full_n,
        conv1_out16_write => conv1_U0_conv1_out16_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => conv1_U0_ap_done,
        ap_ready => conv1_U0_ap_ready,
        ap_idle => conv1_U0_ap_idle,
        ap_continue => conv1_U0_ap_continue);

    pool1_U0 : component AutoEncoder_pool1
    port map (
        ap_start => pool1_U0_ap_start,
        start_full_n => start_for_conv2_U0_full_n,
        start_out => pool1_U0_start_out,
        start_write => pool1_U0_start_write,
        conv1_out16_dout => conv1_out_dout,
        conv1_out16_empty_n => conv1_out_empty_n,
        conv1_out16_read => pool1_U0_conv1_out16_read,
        pool1_out17_din => pool1_U0_pool1_out17_din,
        pool1_out17_full_n => pool1_out_full_n,
        pool1_out17_write => pool1_U0_pool1_out17_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => pool1_U0_ap_done,
        ap_ready => pool1_U0_ap_ready,
        ap_idle => pool1_U0_ap_idle,
        ap_continue => pool1_U0_ap_continue);

    conv2_U0 : component AutoEncoder_conv2
    port map (
        ap_start => conv2_U0_ap_start,
        start_full_n => start_for_pool2_U0_full_n,
        start_out => conv2_U0_start_out,
        start_write => conv2_U0_start_write,
        pool1_out17_dout => pool1_out_dout,
        pool1_out17_empty_n => pool1_out_empty_n,
        pool1_out17_read => conv2_U0_pool1_out17_read,
        conv2_out18_din => conv2_U0_conv2_out18_din,
        conv2_out18_full_n => conv2_out_full_n,
        conv2_out18_write => conv2_U0_conv2_out18_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => conv2_U0_ap_done,
        ap_ready => conv2_U0_ap_ready,
        ap_idle => conv2_U0_ap_idle,
        ap_continue => conv2_U0_ap_continue);

    pool2_U0 : component AutoEncoder_pool2
    port map (
        ap_start => pool2_U0_ap_start,
        start_full_n => start_for_conv3_U0_full_n,
        start_out => pool2_U0_start_out,
        start_write => pool2_U0_start_write,
        conv2_out18_dout => conv2_out_dout,
        conv2_out18_empty_n => conv2_out_empty_n,
        conv2_out18_read => pool2_U0_conv2_out18_read,
        pool2_out19_din => pool2_U0_pool2_out19_din,
        pool2_out19_full_n => pool2_out_full_n,
        pool2_out19_write => pool2_U0_pool2_out19_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => pool2_U0_ap_done,
        ap_ready => pool2_U0_ap_ready,
        ap_idle => pool2_U0_ap_idle,
        ap_continue => pool2_U0_ap_continue);

    conv3_U0 : component AutoEncoder_conv3
    port map (
        ap_start => conv3_U0_ap_start,
        start_full_n => start_for_pool3_U0_full_n,
        start_out => conv3_U0_start_out,
        start_write => conv3_U0_start_write,
        pool2_out19_dout => pool2_out_dout,
        pool2_out19_empty_n => pool2_out_empty_n,
        pool2_out19_read => conv3_U0_pool2_out19_read,
        conv3_out20_din => conv3_U0_conv3_out20_din,
        conv3_out20_full_n => conv3_out_full_n,
        conv3_out20_write => conv3_U0_conv3_out20_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => conv3_U0_ap_done,
        ap_ready => conv3_U0_ap_ready,
        ap_idle => conv3_U0_ap_idle,
        ap_continue => conv3_U0_ap_continue);

    pool3_U0 : component AutoEncoder_pool3
    port map (
        ap_start => pool3_U0_ap_start,
        start_full_n => start_for_conv4_U0_full_n,
        start_out => pool3_U0_start_out,
        start_write => pool3_U0_start_write,
        conv3_out20_dout => conv3_out_dout,
        conv3_out20_empty_n => conv3_out_empty_n,
        conv3_out20_read => pool3_U0_conv3_out20_read,
        pool3_out21_din => pool3_U0_pool3_out21_din,
        pool3_out21_full_n => pool3_out_full_n,
        pool3_out21_write => pool3_U0_pool3_out21_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => pool3_U0_ap_done,
        ap_ready => pool3_U0_ap_ready,
        ap_idle => pool3_U0_ap_idle,
        ap_continue => pool3_U0_ap_continue);

    conv4_U0 : component AutoEncoder_conv4
    port map (
        ap_start => conv4_U0_ap_start,
        start_full_n => start_for_upsamp4_U0_full_n,
        start_out => conv4_U0_start_out,
        start_write => conv4_U0_start_write,
        pool3_out21_dout => pool3_out_dout,
        pool3_out21_empty_n => pool3_out_empty_n,
        pool3_out21_read => conv4_U0_pool3_out21_read,
        conv4_out22_din => conv4_U0_conv4_out22_din,
        conv4_out22_full_n => conv4_out_full_n,
        conv4_out22_write => conv4_U0_conv4_out22_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => conv4_U0_ap_done,
        ap_ready => conv4_U0_ap_ready,
        ap_idle => conv4_U0_ap_idle,
        ap_continue => conv4_U0_ap_continue);

    upsamp4_U0 : component AutoEncoder_upsamp4
    port map (
        ap_start => upsamp4_U0_ap_start,
        start_full_n => start_for_conv5_U0_full_n,
        start_out => upsamp4_U0_start_out,
        start_write => upsamp4_U0_start_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        conv4_out22_dout => conv4_out_dout,
        conv4_out22_empty_n => conv4_out_empty_n,
        conv4_out22_read => upsamp4_U0_conv4_out22_read,
        upsamp4_out23_din => upsamp4_U0_upsamp4_out23_din,
        upsamp4_out23_full_n => upsamp4_out_full_n,
        upsamp4_out23_write => upsamp4_U0_upsamp4_out23_write,
        ap_done => upsamp4_U0_ap_done,
        ap_ready => upsamp4_U0_ap_ready,
        ap_idle => upsamp4_U0_ap_idle,
        ap_continue => upsamp4_U0_ap_continue);

    conv5_U0 : component AutoEncoder_conv5
    port map (
        ap_start => conv5_U0_ap_start,
        start_full_n => start_for_upsamp5_U0_full_n,
        start_out => conv5_U0_start_out,
        start_write => conv5_U0_start_write,
        upsamp4_out23_dout => upsamp4_out_dout,
        upsamp4_out23_empty_n => upsamp4_out_empty_n,
        upsamp4_out23_read => conv5_U0_upsamp4_out23_read,
        conv5_out24_din => conv5_U0_conv5_out24_din,
        conv5_out24_full_n => conv5_out_full_n,
        conv5_out24_write => conv5_U0_conv5_out24_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => conv5_U0_ap_done,
        ap_ready => conv5_U0_ap_ready,
        ap_idle => conv5_U0_ap_idle,
        ap_continue => conv5_U0_ap_continue);

    upsamp5_U0 : component AutoEncoder_upsamp5
    port map (
        ap_start => upsamp5_U0_ap_start,
        start_full_n => start_for_conv6_U0_full_n,
        start_out => upsamp5_U0_start_out,
        start_write => upsamp5_U0_start_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        conv5_out24_dout => conv5_out_dout,
        conv5_out24_empty_n => conv5_out_empty_n,
        conv5_out24_read => upsamp5_U0_conv5_out24_read,
        upsamp5_out25_din => upsamp5_U0_upsamp5_out25_din,
        upsamp5_out25_full_n => upsamp5_out_full_n,
        upsamp5_out25_write => upsamp5_U0_upsamp5_out25_write,
        ap_done => upsamp5_U0_ap_done,
        ap_ready => upsamp5_U0_ap_ready,
        ap_idle => upsamp5_U0_ap_idle,
        ap_continue => upsamp5_U0_ap_continue);

    conv6_U0 : component AutoEncoder_conv6
    port map (
        ap_start => conv6_U0_ap_start,
        start_full_n => start_for_upsamp6_U0_full_n,
        start_out => conv6_U0_start_out,
        start_write => conv6_U0_start_write,
        upsamp5_out25_dout => upsamp5_out_dout,
        upsamp5_out25_empty_n => upsamp5_out_empty_n,
        upsamp5_out25_read => conv6_U0_upsamp5_out25_read,
        conv6_out26_din => conv6_U0_conv6_out26_din,
        conv6_out26_full_n => conv6_out_full_n,
        conv6_out26_write => conv6_U0_conv6_out26_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => conv6_U0_ap_done,
        ap_ready => conv6_U0_ap_ready,
        ap_idle => conv6_U0_ap_idle,
        ap_continue => conv6_U0_ap_continue);

    upsamp6_U0 : component AutoEncoder_upsamp6
    port map (
        ap_start => upsamp6_U0_ap_start,
        start_full_n => start_for_conv7_U0_full_n,
        start_out => upsamp6_U0_start_out,
        start_write => upsamp6_U0_start_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        conv6_out26_dout => conv6_out_dout,
        conv6_out26_empty_n => conv6_out_empty_n,
        conv6_out26_read => upsamp6_U0_conv6_out26_read,
        upsamp6_out27_din => upsamp6_U0_upsamp6_out27_din,
        upsamp6_out27_full_n => upsamp6_out_full_n,
        upsamp6_out27_write => upsamp6_U0_upsamp6_out27_write,
        ap_done => upsamp6_U0_ap_done,
        ap_ready => upsamp6_U0_ap_ready,
        ap_idle => upsamp6_U0_ap_idle,
        ap_continue => upsamp6_U0_ap_continue);

    conv7_U0 : component AutoEncoder_conv7
    port map (
        ap_start => conv7_U0_ap_start,
        start_full_n => start_for_castOut_U0_full_n,
        start_out => conv7_U0_start_out,
        start_write => conv7_U0_start_write,
        upsamp6_out27_dout => upsamp6_out_dout,
        upsamp6_out27_empty_n => upsamp6_out_empty_n,
        upsamp6_out27_read => conv7_U0_upsamp6_out27_read,
        full_out_float15_din => conv7_U0_full_out_float15_din,
        full_out_float15_full_n => full_out_float_full_n,
        full_out_float15_write => conv7_U0_full_out_float15_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_done => conv7_U0_ap_done,
        ap_ready => conv7_U0_ap_ready,
        ap_idle => conv7_U0_ap_idle,
        ap_continue => conv7_U0_ap_continue);

    castOut_U0 : component AutoEncoder_castOut
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => castOut_U0_ap_start,
        ap_done => castOut_U0_ap_done,
        ap_continue => castOut_U0_ap_continue,
        ap_idle => castOut_U0_ap_idle,
        ap_ready => castOut_U0_ap_ready,
        full_out_float15_dout => full_out_float_dout,
        full_out_float15_num_data_valid => full_out_float_num_data_valid,
        full_out_float15_fifo_cap => full_out_float_fifo_cap,
        full_out_float15_empty_n => full_out_float_empty_n,
        full_out_float15_read => castOut_U0_full_out_float15_read,
        full_out_AXI_TREADY => full_out_AXI_TREADY,
        full_out_AXI_TDATA => castOut_U0_full_out_AXI_TDATA,
        full_out_AXI_TVALID => castOut_U0_full_out_AXI_TVALID,
        full_out_AXI_TKEEP => castOut_U0_full_out_AXI_TKEEP,
        full_out_AXI_TSTRB => castOut_U0_full_out_AXI_TSTRB,
        full_out_AXI_TUSER => castOut_U0_full_out_AXI_TUSER,
        full_out_AXI_TLAST => castOut_U0_full_out_AXI_TLAST,
        full_out_AXI_TID => castOut_U0_full_out_AXI_TID,
        full_out_AXI_TDEST => castOut_U0_full_out_AXI_TDEST);

    full_in_float_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => castIn_U0_full_in_float14_din,
        if_full_n => full_in_float_full_n,
        if_write => castIn_U0_full_in_float14_write,
        if_dout => full_in_float_dout,
        if_num_data_valid => full_in_float_num_data_valid,
        if_fifo_cap => full_in_float_fifo_cap,
        if_empty_n => full_in_float_empty_n,
        if_read => conv1_U0_full_in_float14_read);

    conv1_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv1_U0_conv1_out16_din,
        if_full_n => conv1_out_full_n,
        if_write => conv1_U0_conv1_out16_write,
        if_dout => conv1_out_dout,
        if_num_data_valid => conv1_out_num_data_valid,
        if_fifo_cap => conv1_out_fifo_cap,
        if_empty_n => conv1_out_empty_n,
        if_read => pool1_U0_conv1_out16_read);

    pool1_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool1_U0_pool1_out17_din,
        if_full_n => pool1_out_full_n,
        if_write => pool1_U0_pool1_out17_write,
        if_dout => pool1_out_dout,
        if_num_data_valid => pool1_out_num_data_valid,
        if_fifo_cap => pool1_out_fifo_cap,
        if_empty_n => pool1_out_empty_n,
        if_read => conv2_U0_pool1_out17_read);

    conv2_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv2_U0_conv2_out18_din,
        if_full_n => conv2_out_full_n,
        if_write => conv2_U0_conv2_out18_write,
        if_dout => conv2_out_dout,
        if_num_data_valid => conv2_out_num_data_valid,
        if_fifo_cap => conv2_out_fifo_cap,
        if_empty_n => conv2_out_empty_n,
        if_read => pool2_U0_conv2_out18_read);

    pool2_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool2_U0_pool2_out19_din,
        if_full_n => pool2_out_full_n,
        if_write => pool2_U0_pool2_out19_write,
        if_dout => pool2_out_dout,
        if_num_data_valid => pool2_out_num_data_valid,
        if_fifo_cap => pool2_out_fifo_cap,
        if_empty_n => pool2_out_empty_n,
        if_read => conv3_U0_pool2_out19_read);

    conv3_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv3_U0_conv3_out20_din,
        if_full_n => conv3_out_full_n,
        if_write => conv3_U0_conv3_out20_write,
        if_dout => conv3_out_dout,
        if_num_data_valid => conv3_out_num_data_valid,
        if_fifo_cap => conv3_out_fifo_cap,
        if_empty_n => conv3_out_empty_n,
        if_read => pool3_U0_conv3_out20_read);

    pool3_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool3_U0_pool3_out21_din,
        if_full_n => pool3_out_full_n,
        if_write => pool3_U0_pool3_out21_write,
        if_dout => pool3_out_dout,
        if_num_data_valid => pool3_out_num_data_valid,
        if_fifo_cap => pool3_out_fifo_cap,
        if_empty_n => pool3_out_empty_n,
        if_read => conv4_U0_pool3_out21_read);

    conv4_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv4_U0_conv4_out22_din,
        if_full_n => conv4_out_full_n,
        if_write => conv4_U0_conv4_out22_write,
        if_dout => conv4_out_dout,
        if_num_data_valid => conv4_out_num_data_valid,
        if_fifo_cap => conv4_out_fifo_cap,
        if_empty_n => conv4_out_empty_n,
        if_read => upsamp4_U0_conv4_out22_read);

    upsamp4_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => upsamp4_U0_upsamp4_out23_din,
        if_full_n => upsamp4_out_full_n,
        if_write => upsamp4_U0_upsamp4_out23_write,
        if_dout => upsamp4_out_dout,
        if_num_data_valid => upsamp4_out_num_data_valid,
        if_fifo_cap => upsamp4_out_fifo_cap,
        if_empty_n => upsamp4_out_empty_n,
        if_read => conv5_U0_upsamp4_out23_read);

    conv5_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv5_U0_conv5_out24_din,
        if_full_n => conv5_out_full_n,
        if_write => conv5_U0_conv5_out24_write,
        if_dout => conv5_out_dout,
        if_num_data_valid => conv5_out_num_data_valid,
        if_fifo_cap => conv5_out_fifo_cap,
        if_empty_n => conv5_out_empty_n,
        if_read => upsamp5_U0_conv5_out24_read);

    upsamp5_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => upsamp5_U0_upsamp5_out25_din,
        if_full_n => upsamp5_out_full_n,
        if_write => upsamp5_U0_upsamp5_out25_write,
        if_dout => upsamp5_out_dout,
        if_num_data_valid => upsamp5_out_num_data_valid,
        if_fifo_cap => upsamp5_out_fifo_cap,
        if_empty_n => upsamp5_out_empty_n,
        if_read => conv6_U0_upsamp5_out25_read);

    conv6_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv6_U0_conv6_out26_din,
        if_full_n => conv6_out_full_n,
        if_write => conv6_U0_conv6_out26_write,
        if_dout => conv6_out_dout,
        if_num_data_valid => conv6_out_num_data_valid,
        if_fifo_cap => conv6_out_fifo_cap,
        if_empty_n => conv6_out_empty_n,
        if_read => upsamp6_U0_conv6_out26_read);

    upsamp6_out_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => upsamp6_U0_upsamp6_out27_din,
        if_full_n => upsamp6_out_full_n,
        if_write => upsamp6_U0_upsamp6_out27_write,
        if_dout => upsamp6_out_dout,
        if_num_data_valid => upsamp6_out_num_data_valid,
        if_fifo_cap => upsamp6_out_fifo_cap,
        if_empty_n => upsamp6_out_empty_n,
        if_read => conv7_U0_upsamp6_out27_read);

    full_out_float_U : component AutoEncoder_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => conv7_U0_full_out_float15_din,
        if_full_n => full_out_float_full_n,
        if_write => conv7_U0_full_out_float15_write,
        if_dout => full_out_float_dout,
        if_num_data_valid => full_out_float_num_data_valid,
        if_fifo_cap => full_out_float_fifo_cap,
        if_empty_n => full_out_float_empty_n,
        if_read => castOut_U0_full_out_float15_read);

    start_for_conv1_U0_U : component AutoEncoder_start_for_conv1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv1_U0_din,
        if_full_n => start_for_conv1_U0_full_n,
        if_write => castIn_U0_start_write,
        if_dout => start_for_conv1_U0_dout,
        if_empty_n => start_for_conv1_U0_empty_n,
        if_read => conv1_U0_ap_ready);

    start_for_pool1_U0_U : component AutoEncoder_start_for_pool1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool1_U0_din,
        if_full_n => start_for_pool1_U0_full_n,
        if_write => conv1_U0_start_write,
        if_dout => start_for_pool1_U0_dout,
        if_empty_n => start_for_pool1_U0_empty_n,
        if_read => pool1_U0_ap_ready);

    start_for_conv2_U0_U : component AutoEncoder_start_for_conv2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv2_U0_din,
        if_full_n => start_for_conv2_U0_full_n,
        if_write => pool1_U0_start_write,
        if_dout => start_for_conv2_U0_dout,
        if_empty_n => start_for_conv2_U0_empty_n,
        if_read => conv2_U0_ap_ready);

    start_for_pool2_U0_U : component AutoEncoder_start_for_pool2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool2_U0_din,
        if_full_n => start_for_pool2_U0_full_n,
        if_write => conv2_U0_start_write,
        if_dout => start_for_pool2_U0_dout,
        if_empty_n => start_for_pool2_U0_empty_n,
        if_read => pool2_U0_ap_ready);

    start_for_conv3_U0_U : component AutoEncoder_start_for_conv3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv3_U0_din,
        if_full_n => start_for_conv3_U0_full_n,
        if_write => pool2_U0_start_write,
        if_dout => start_for_conv3_U0_dout,
        if_empty_n => start_for_conv3_U0_empty_n,
        if_read => conv3_U0_ap_ready);

    start_for_pool3_U0_U : component AutoEncoder_start_for_pool3_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool3_U0_din,
        if_full_n => start_for_pool3_U0_full_n,
        if_write => conv3_U0_start_write,
        if_dout => start_for_pool3_U0_dout,
        if_empty_n => start_for_pool3_U0_empty_n,
        if_read => pool3_U0_ap_ready);

    start_for_conv4_U0_U : component AutoEncoder_start_for_conv4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv4_U0_din,
        if_full_n => start_for_conv4_U0_full_n,
        if_write => pool3_U0_start_write,
        if_dout => start_for_conv4_U0_dout,
        if_empty_n => start_for_conv4_U0_empty_n,
        if_read => conv4_U0_ap_ready);

    start_for_upsamp4_U0_U : component AutoEncoder_start_for_upsamp4_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_upsamp4_U0_din,
        if_full_n => start_for_upsamp4_U0_full_n,
        if_write => conv4_U0_start_write,
        if_dout => start_for_upsamp4_U0_dout,
        if_empty_n => start_for_upsamp4_U0_empty_n,
        if_read => upsamp4_U0_ap_ready);

    start_for_conv5_U0_U : component AutoEncoder_start_for_conv5_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv5_U0_din,
        if_full_n => start_for_conv5_U0_full_n,
        if_write => upsamp4_U0_start_write,
        if_dout => start_for_conv5_U0_dout,
        if_empty_n => start_for_conv5_U0_empty_n,
        if_read => conv5_U0_ap_ready);

    start_for_upsamp5_U0_U : component AutoEncoder_start_for_upsamp5_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_upsamp5_U0_din,
        if_full_n => start_for_upsamp5_U0_full_n,
        if_write => conv5_U0_start_write,
        if_dout => start_for_upsamp5_U0_dout,
        if_empty_n => start_for_upsamp5_U0_empty_n,
        if_read => upsamp5_U0_ap_ready);

    start_for_conv6_U0_U : component AutoEncoder_start_for_conv6_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv6_U0_din,
        if_full_n => start_for_conv6_U0_full_n,
        if_write => upsamp5_U0_start_write,
        if_dout => start_for_conv6_U0_dout,
        if_empty_n => start_for_conv6_U0_empty_n,
        if_read => conv6_U0_ap_ready);

    start_for_upsamp6_U0_U : component AutoEncoder_start_for_upsamp6_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_upsamp6_U0_din,
        if_full_n => start_for_upsamp6_U0_full_n,
        if_write => conv6_U0_start_write,
        if_dout => start_for_upsamp6_U0_dout,
        if_empty_n => start_for_upsamp6_U0_empty_n,
        if_read => upsamp6_U0_ap_ready);

    start_for_conv7_U0_U : component AutoEncoder_start_for_conv7_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_conv7_U0_din,
        if_full_n => start_for_conv7_U0_full_n,
        if_write => upsamp6_U0_start_write,
        if_dout => start_for_conv7_U0_dout,
        if_empty_n => start_for_conv7_U0_empty_n,
        if_read => conv7_U0_ap_ready);

    start_for_castOut_U0_U : component AutoEncoder_start_for_castOut_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_castOut_U0_din,
        if_full_n => start_for_castOut_U0_full_n,
        if_write => conv7_U0_start_write,
        if_dout => start_for_castOut_U0_dout,
        if_empty_n => start_for_castOut_U0_empty_n,
        if_read => castOut_U0_ap_ready);




    ap_done <= castOut_U0_ap_done;
    ap_idle <= (upsamp6_U0_ap_idle and upsamp5_U0_ap_idle and upsamp4_U0_ap_idle and pool3_U0_ap_idle and pool2_U0_ap_idle and pool1_U0_ap_idle and conv7_U0_ap_idle and conv6_U0_ap_idle and conv5_U0_ap_idle and conv4_U0_ap_idle and conv3_U0_ap_idle and conv2_U0_ap_idle and conv1_U0_ap_idle and castOut_U0_ap_idle and castIn_U0_ap_idle);
    ap_ready <= castIn_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    castIn_U0_ap_continue <= ap_const_logic_1;
    castIn_U0_ap_start <= ap_start;
    castOut_U0_ap_continue <= ap_const_logic_1;
    castOut_U0_ap_start <= start_for_castOut_U0_empty_n;
    conv1_U0_ap_continue <= ap_const_logic_1;
    conv1_U0_ap_start <= start_for_conv1_U0_empty_n;
    conv2_U0_ap_continue <= ap_const_logic_1;
    conv2_U0_ap_start <= start_for_conv2_U0_empty_n;
    conv3_U0_ap_continue <= ap_const_logic_1;
    conv3_U0_ap_start <= start_for_conv3_U0_empty_n;
    conv4_U0_ap_continue <= ap_const_logic_1;
    conv4_U0_ap_start <= start_for_conv4_U0_empty_n;
    conv5_U0_ap_continue <= ap_const_logic_1;
    conv5_U0_ap_start <= start_for_conv5_U0_empty_n;
    conv6_U0_ap_continue <= ap_const_logic_1;
    conv6_U0_ap_start <= start_for_conv6_U0_empty_n;
    conv7_U0_ap_continue <= ap_const_logic_1;
    conv7_U0_ap_start <= start_for_conv7_U0_empty_n;
    full_in_AXI_TREADY <= castIn_U0_full_in_AXI_TREADY;
    full_out_AXI_TDATA <= castOut_U0_full_out_AXI_TDATA;
    full_out_AXI_TDEST <= castOut_U0_full_out_AXI_TDEST;
    full_out_AXI_TID <= castOut_U0_full_out_AXI_TID;
    full_out_AXI_TKEEP <= castOut_U0_full_out_AXI_TKEEP;
    full_out_AXI_TLAST <= castOut_U0_full_out_AXI_TLAST;
    full_out_AXI_TSTRB <= castOut_U0_full_out_AXI_TSTRB;
    full_out_AXI_TUSER <= castOut_U0_full_out_AXI_TUSER;
    full_out_AXI_TVALID <= castOut_U0_full_out_AXI_TVALID;
    pool1_U0_ap_continue <= ap_const_logic_1;
    pool1_U0_ap_start <= start_for_pool1_U0_empty_n;
    pool2_U0_ap_continue <= ap_const_logic_1;
    pool2_U0_ap_start <= start_for_pool2_U0_empty_n;
    pool3_U0_ap_continue <= ap_const_logic_1;
    pool3_U0_ap_start <= start_for_pool3_U0_empty_n;
    start_for_castOut_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_conv7_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pool3_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_upsamp4_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_upsamp5_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_upsamp6_U0_din <= (0=>ap_const_logic_1, others=>'-');
    upsamp4_U0_ap_continue <= ap_const_logic_1;
    upsamp4_U0_ap_start <= start_for_upsamp4_U0_empty_n;
    upsamp5_U0_ap_continue <= ap_const_logic_1;
    upsamp5_U0_ap_start <= start_for_upsamp5_U0_empty_n;
    upsamp6_U0_ap_continue <= ap_const_logic_1;
    upsamp6_U0_ap_start <= start_for_upsamp6_U0_empty_n;
end behav;
